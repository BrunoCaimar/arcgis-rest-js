{"version":3,"file":"request.esm.min.js","sources":["../../src/utils/process-params.ts","../../src/utils/encode-query-string.ts","../../../arcgis-rest-form-data/browser-ponyfill.mjs","../../src/utils/encode-form-data.ts","../../src/utils/ArcGISRequestError.ts","../../src/utils/warn.ts","../../../arcgis-rest-fetch/browser-ponyfill.mjs","../../src/request.ts","../../src/utils/append-custom-params.ts","../../src/utils/ArcGISAccessDeniedError.ts","../../src/utils/clean-url.ts","../../src/utils/decode-query-string.ts","../../src/utils/ErrorTypes.ts","../../src/fetch-token.ts","../../src/ApplicationCredentialsManager.ts","../../src/ApiKeyManager.ts","../../src/generate-token.ts","../../src/federation-utils.ts","../../src/validate-app-access.ts","../../src/revoke-token.ts","../../src/utils/base-64-url.ts","../../src/utils/generate-random-string.ts","../../src/ArcGISIdentityManager.ts","../../src/utils/generate-code-challenge.ts","../../src/app-tokens.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some(key => {\n    let value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach(key => {\n    let param = params[key];\n\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of arrays, an array of objects\n        // to be stringified, or an array of non-objects to be comma-separated\n        // eslint-disable-next-line no-case-declarations\n        const firstElementType = param[0]?.constructor?.name;\n        value =\n          firstElementType === \"Array\" ? param : // pass thru array of arrays\n          firstElementType === \"Object\" ? JSON.stringify(param) : // stringify array of objects\n          param.join(\",\"); // join other types of array elements\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (value || value === 0 || typeof value === \"string\" || Array.isArray(value)) {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params.js\";\n\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key: string, value: any): string {\n  // For array of arrays, repeat key=value for each element of containing array\n  if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n    return value\n      .map((arrayElem: string) => encodeParam(key, arrayElem))\n      .join(\"&\");\n  }\n\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n","export const FormData = globalThis.FormData;\nexport const File = globalThis.File;\nexport const Blob = globalThis.Blob;\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params.js\";\nimport { encodeQueryString } from \"./encode-query-string.js\";\nimport { FormData } from \"@esri/arcgis-rest-form-data\";\n\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(\n  params: any,\n  forceFormData?: boolean\n): FormData | string {\n  // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n  const useFormData = requiresFormData(params) || forceFormData;\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nexport class ArcGISRequestError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers becasue we are ES2017 now\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n","export function getFetch() {\n  return Promise.resolve({\n    fetch: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Response: globalThis.Response,\n    Request: globalThis.Request\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { requiresFormData } from \"./utils/process-params.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { IParams } from \"./utils/IParams.js\";\nimport { warn } from \"./utils/warn.js\";\nimport { IRetryAuthError } from \"./utils/retryAuthError.js\";\nimport { getFetch } from \"@esri/arcgis-rest-fetch\";\nimport { IAuthenticationManager } from \"./index.js\";\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(\n  options: IRequestOptions,\n  hideWarnings?: boolean\n) {\n  if (options.authentication && !hideWarnings) {\n    warn(\n      \"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\"\n    );\n  }\n  (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\n\nexport function getDefaultRequestOptions() {\n  return (\n    (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n      httpMethod: \"POST\",\n      params: {\n        f: \"json\"\n      }\n    }\n  );\n}\n\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 1) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      tries = tries + 1;\n\n      getSession(this.url, this.options)\n        .then((session) => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          return internalRequest(this.url, newOptions);\n        })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((e) => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (\n            e.name === this.name &&\n            e.message === this.message &&\n            tries >= retryLimit\n          ) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions,\n  originalAuthError?: ArcGISAuthError\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (\n      code === 498 ||\n      code === 499 ||\n      messageCode === \"GWM_0003\" ||\n      (code === 400 && message === \"Unable to generate token.\")\n    ) {\n      if (originalAuthError) {\n        throw originalAuthError;\n      } else {\n        throw new ArcGISAuthError(message, errorCode, response, url, options);\n      }\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nexport function internalRequest(\n  url: string,\n  requestOptions: IRequestOptions\n): Promise<any> {\n  const defaults = getDefaultRequestOptions();\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"POST\" },\n    ...defaults,\n    ...requestOptions,\n    ...{\n      params: {\n        ...defaults.params,\n        ...requestOptions.params\n      },\n      headers: {\n        ...defaults.headers,\n        ...requestOptions.headers\n      }\n    }\n  };\n\n  const { httpMethod, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...options.params\n  };\n\n  let originalAuthError: ArcGISAuthError = null;\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    /* ensures behavior mimics XMLHttpRequest.\n    needed to support sending IWA cookies */\n    credentials: options.credentials || \"same-origin\"\n  };\n\n  // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n  // and that request needs to send cookies cross domain\n  // so we need to set the credentials to \"include\"\n  if (\n    options.headers &&\n    options.headers[\"X-Esri-Auth-Client-Id\"] &&\n    url.indexOf(\"/oauth2/platformSelf\") > -1\n  ) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  let authentication: IAuthenticationManager;\n\n  // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n  // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n  if (typeof options.authentication === \"string\") {\n    const rawToken = options.authentication;\n\n    authentication = {\n      portal: \"https://www.arcgis.com/sharing/rest\",\n      getToken: () => {\n        return Promise.resolve(rawToken);\n      }\n    };\n\n    /* istanbul ignore else - we don't need to test NOT warning people */\n    if (\n      !options.authentication.startsWith(\"AAPK\") && // doesn't look like an API Key\n      !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n      !(globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we havn't shown the user this warning yet\n    ) {\n      warn(\n        `Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`\n      );\n\n      (globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n    }\n  } else {\n    authentication = options.authentication;\n  }\n\n  // for errors in GET requests we want the URL passed to the error to be the URL before\n  // query params are applied.\n  const originalUrl = url;\n\n  return (\n    authentication\n      ? authentication.getToken(url).catch((err) => {\n          /**\n           * append original request url and requestOptions\n           * to the error thrown by getToken()\n           * to assist with retrying\n           */\n          err.url = url;\n          err.options = options;\n          /**\n           * if an attempt is made to talk to an unfederated server\n           * first try the request anonymously. if a 'token required'\n           * error is thrown, throw the UNFEDERATED error then.\n           */\n          originalAuthError = err;\n          return Promise.resolve(\"\");\n        })\n      : Promise.resolve(\"\")\n  )\n    .then((token) => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (authentication && authentication.getDomainCredentials) {\n        fetchOptions.credentials = authentication.getDomainCredentials(url);\n      }\n\n      // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n      const requestHeaders: {\n        [key: string]: any;\n      } = {};\n\n      if (fetchOptions.method === \"GET\") {\n        // Prevents token from being passed in query params when hideToken option is used.\n        /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n        if (\n          params.token &&\n          options.hideToken &&\n          // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n          typeof window === \"undefined\"\n        ) {\n          requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n          delete params.token;\n        }\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          // This would exceed the maximum length for URLs specified by the consumer and requires POST\n          (options.maxUrlLength &&\n            urlWithQueryString.length > options.maxUrlLength) ||\n          // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n          (params.token && options.hideToken)\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n\n          // If the token was already added as a Auth header, add the token back to body with other params instead of header\n          if (token.length && options.hideToken) {\n            params.token = token;\n            // Remove existing header that was added before url query length was checked\n            delete requestHeaders[\"X-Esri-Authorization\"];\n          }\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      /* updateResources currently requires FormData even when the input parameters dont warrant it.\n  https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n      see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n      const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params, forceFormData) as any;\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestHeaders,\n        ...options.headers\n      };\n\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (typeof window === \"undefined\" && !fetchOptions.headers.referer) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params) && !forceFormData) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      /**\n       * Check for a global fetch first and use it if available. This allows us to use the default\n       * configuration of fetch-mock in tests.\n       */\n\n      /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n      return globalThis.fetch\n        ? globalThis.fetch(url, fetchOptions)\n        : getFetch().then(({ fetch }) => {\n            return fetch(url, fetchOptions);\n          });\n    })\n    .then((response: any) => {\n      if (!response.ok) {\n        // server responded w/ an actual error (404, 500, etc)\n        const { status, statusText } = response;\n        throw new ArcGISRequestError(\n          statusText,\n          `HTTP ${status}`,\n          response,\n          url,\n          options\n        );\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then((data) => {\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        const response = checkForErrors(\n          data,\n          originalUrl,\n          params,\n          options,\n          originalAuthError\n        );\n\n        if (originalAuthError) {\n          /* If the request was made to an unfederated service that\n          didn't require authentication, add the base url and a dummy token\n          to the list of trusted servers to avoid another federation check\n          in the event of a repeat request */\n          const truncatedUrl: string = url\n            .toLowerCase()\n            .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n\n          (options.authentication as any).federatedServers[truncatedUrl] = {\n            token: [],\n            // default to 24 hours\n            expires: new Date(Date.now() + 86400 * 1000)\n          };\n          originalAuthError = null;\n        }\n        return response;\n      } else {\n        return data;\n      }\n    });\n}\n\n/**\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n * //\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n * //\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n * //\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  return internalRequest(url, requestOptions).catch((e) => {\n    if (\n      e instanceof ArcGISAuthError &&\n      e.code === 498 &&\n      e.message === \"498: Invalid token.\" &&\n      requestOptions.authentication &&\n      typeof requestOptions.authentication !== \"string\" &&\n      requestOptions.authentication.canRefresh &&\n      requestOptions.authentication.refreshCredentials\n    ) {\n      return e.retry(() => {\n        return (requestOptions.authentication as any).refreshCredentials();\n      }, 1);\n    } else {\n      return Promise.reject(e);\n    }\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"portal\",\n    \"fetch\",\n    \"maxUrlLength\",\n    \"headers\",\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions,\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (customOptions[key] || typeof customOptions[key] === \"boolean\") {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce((value, key) => {\n    if ((options as any)[key]) {\n      (value as any)[key] = (options as any)[key];\n    }\n    return value;\n  }, {} as IRequestOptions);\n}\n","/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nexport class ArcGISAccessDeniedError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISAccessDeniedError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * Create a new `ArcGISAccessDeniedError`  object.\n   */\n  constructor() {\n    const message = \"The user has denied your authorization request.\";\n\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers becasue we are ES2017 now\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    this.name = \"ArcGISAccessDeniedError\";\n  }\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url: string) {\n  // Guard so we don't try to trim something that's not a string\n  if (typeof url !== \"string\") {\n    return url;\n  }\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = url.trim();\n\n  // remove the trailing slash to the url if one was included\n  if (url[url.length - 1] === \"/\") {\n    url = url.slice(0, -1);\n  }\n  return url;\n}\n","/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport function decodeParam(param: string): { key: string; value: string } {\n  const [key, value] = param.split(\"=\");\n  return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nexport function decodeQueryString(query?: string): { [key: string]: string } {\n  if (!query || query.length <= 0) {\n    return {};\n  }\n\n  return query\n    .replace(/^#/, \"\")\n    .replace(/^\\?/, \"\")\n    .split(\"&\")\n    .reduce((acc, entry) => {\n      const { key, value } = decodeParam(entry);\n      acc[key] = value;\n      return acc;\n    }, {} as any);\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     case ErrorType.ArcGISAccessDeniedError:\n *     // handle a user denying an authorization request in an oAuth workflow\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\",\n  ArcGISAccessDeniedError = \"ArcGISAccessDeniedError\"\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\n\nconst FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\n\ninterface IFetchTokenRawResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n  refresh_token_expires_in?: number;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl: boolean;\n  refreshToken?: string;\n  refreshTokenExpires?: Date;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n\n  return request(url, options).then((response: IFetchTokenRawResponse) => {\n    const r: IFetchTokenResponse = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n        // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n        // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n        Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS\n      ),\n      ssl: response.ssl === true\n    };\n\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n\n    if (response.refresh_token_expires_in) {\n      r.refreshTokenExpires = new Date(\n        // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n        // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n        Date.now() +\n          response.refresh_token_expires_in * 1000 -\n          FIVE_MINUTES_IN_MILLISECONDS\n      );\n    }\n\n    return r;\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { fetchToken } from \"./fetch-token.js\";\n\nexport interface IApplicationCredentialsManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n\n  /**\n   * URL of ArcGIS REST base, defaults to \"https://www.arcgis.com/sharing/rest\"\n   */\n  portal?: string;\n\n  /**\n   * Duration of requested tokens in minutes. defaults to 7200 (5 days).\n   */\n  duration?: number;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with oAuth 2.0 application credentials. The instance of `ApplicationCredentialsManager` can be passed to  {@linkcode IRequestOptions.authentication} to authenticate requests.\n * ```js\n * import { ApplicationSession } from '@esri/arcgis-rest-auth';\n *\n * const session = ApplicationCredentialsManager.fromCredentials({\n *   clientId: \"abc123\",\n *   clientSecret: \"••••••\"\n * })\n * ```\n */\nexport class ApplicationCredentialsManager implements IAuthenticationManager {\n  public portal: string;\n  private clientId: string;\n  private clientSecret: string;\n  private token: string;\n  private expires: Date;\n  private duration: number;\n\n  /**\n   * Preferred method for creating an `ApplicationCredentialsManager`\n   */\n  public static fromCredentials(\n    options: IApplicationCredentialsManagerOptions\n  ) {\n    return new ApplicationCredentialsManager(options);\n  }\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationCredentialsManagerOptions) {\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n\n  // URL is not actually read or passed through.\n  public getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  public refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\",\n        expiration: this.duration\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token/`, options).then(\n      (response) => {\n        this._pendingTokenRequest = null;\n        this.token = response.token;\n        this.expires = response.expires;\n        return response.token;\n      }\n    );\n  }\n\n  public refreshCredentials() {\n    return this.refreshToken().then(() => this);\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApplicationCredentialsManager}.\n */ /* istanbul ignore next */\nexport function ApplicationSession(\n  options: IApplicationCredentialsManagerOptions\n) {\n  console.log(\n    \"DEPRECATED:, 'ApplicationSession' is deprecated. Use 'ApplicationCredentialsManager' instead.\"\n  );\n\n  return new ApplicationCredentialsManager(options);\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\n\n/**\n * Options for the `ApiKey` constructor.\n */\nexport interface IApiKeyOptions {\n  key: string;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with an API keys. The instance of `ApiKeyManager` can be passed to  {@linkcode IRequestOptions.authentication} to authenticate requests.\n * \n * ```js\n * import { ApiKeyManager } from '@esri/arcgis-rest-auth';\n \n * const apiKey = new ApiKeyManager.fromKey(\"...\");\n * ```\n * \n * In most cases however the API key can be passed directly to the {@linkcode IRequestOptions.authentication}.\n */\nexport class ApiKeyManager implements IAuthenticationManager {\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string = \"https://www.arcgis.com/sharing/rest\";\n\n  private key: string;\n\n  /**\n   * The preferred method for creating an instance of `ApiKeyManager`.\n   */\n  public static fromKey(apiKey: string) {\n    return new ApiKeyManager({ key: apiKey });\n  }\n\n  constructor(options: IApiKeyOptions) {\n    this.key = options.key;\n  }\n\n  /**\n   * Gets a token (the API Key).\n   */\n  public getToken(url: string) {\n    return Promise.resolve(this.key);\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApiKeyManager}.\n */ /* istanbul ignore next */\nexport function ApiKey(options: IApiKeyOptions) {\n  console.log(\n    \"DEPRECATED:, 'ApiKey' is deprecated. Use 'ApiKeyManager' instead.\"\n  );\n\n  return new ApiKeyManager(options);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { request, NODEJS_DEFAULT_REFERER_HEADER } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\n\nexport interface IGenerateTokenResponse {\n  token: string;\n  expires: number;\n  ssl: boolean;\n}\n\nexport function generateToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IGenerateTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  /* istanbul ignore else */\n  if (\n    typeof window !== \"undefined\" &&\n    window.location &&\n    window.location.host\n  ) {\n    options.params.referer = window.location.host;\n  } else {\n    options.params.referer = NODEJS_DEFAULT_REFERER_HEADER;\n  }\n\n  return request(url, options);\n}\n","import { cleanUrl } from \"./utils/clean-url.js\";\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex =\n  /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex =\n  /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.arcgis\\.com\\/sharing\\/rest/;\n\nexport function isOnline(url: string): boolean {\n  return arcgisOnlineUrlRegex.test(url);\n}\n\nexport function normalizeOnlinePortalUrl(portalUrl: string): string {\n  if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n    return portalUrl;\n  }\n\n  switch (getOnlineEnvironment(portalUrl)) {\n    case \"dev\":\n      return \"https://devext.arcgis.com/sharing/rest\";\n    case \"qa\":\n      return \"https://qaext.arcgis.com/sharing/rest\";\n    default:\n      return \"https://www.arcgis.com/sharing/rest\";\n  }\n}\n\nexport function getOnlineEnvironment(url: string): string {\n  if (!arcgisOnlineUrlRegex.test(url)) {\n    return null;\n  }\n\n  const match = url.match(arcgisOnlineUrlRegex);\n  const subdomain = match[1].split(\".\").pop();\n\n  if (subdomain.includes(\"dev\")) {\n    return \"dev\";\n  }\n\n  if (subdomain.includes(\"qa\")) {\n    return \"qa\";\n  }\n\n  return \"production\";\n}\n\nexport function isFederated(\n  owningSystemUrl: string,\n  portalUrl: string\n): boolean {\n  const normalizedPortalUrl = cleanUrl(\n    normalizeOnlinePortalUrl(portalUrl)\n  ).replace(/https?:\\/\\//, \"\");\n\n  const normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(\n    /https?:\\/\\//,\n    \"\"\n  );\n\n  return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\n\nexport function canUseOnlineToken(\n  portalUrl: string,\n  requestUrl: string\n): boolean {\n  const portalIsOnline = isOnline(portalUrl);\n  const requestIsOnline = isOnline(requestUrl);\n  const portalEnv = getOnlineEnvironment(portalUrl);\n  const requestEnv = getOnlineEnvironment(requestUrl);\n\n  if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n    return true;\n  }\n\n  return false;\n}\n","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\n\nexport interface IAppAccess {\n  /**\n   * Verifies that the token is valid and the user has access to\n   * the specified app (clientId)\n   */\n  valid: boolean;\n  /**\n   * Should the app present the current user with a \"View Only\" mode\n   */\n  viewOnlyUserTypeApp: boolean;\n}\n\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-auth';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nexport function validateAppAccess(\n  token: string,\n  clientId: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<IAppAccess> {\n  const url = `${portal}/oauth2/validateAppAccess`;\n  const ro = {\n    method: \"POST\",\n    params: {\n      f: \"json\",\n      client_id: clientId,\n      token\n    }\n  } as IRequestOptions;\n  return request(url, ro);\n}\n","import {\n  IRequestOptions,\n  request,\n  cleanUrl,\n  ArcGISRequestError,\n  appendCustomParams\n} from \"./index.js\";\n\nexport interface IRevokeTokenOptions extends IRequestOptions {\n  /**\n   * The token or refresh token to revoke. If a refresh token is passed all access tokens generated with that refresh token are also revoked.\n   */\n  token: string;\n\n  /**\n   * The portal of the tokens to revoke. Defaults to `https://www.arcgis.com/sharing/rest`.\n   */\n  portal?: string;\n\n  /**\n   * The client id fo the application that generated the tokens. Applications can only revoke tokens they created.\n   */\n  clientId: string;\n}\n\nexport interface IRevokeTokenResponse {\n  /**\n   * Indicates if the token was revoked. A success response will also returned for invalid tokens, expired tokens or of an unsupported type of token to prevent leaking information about the provided token.\n   */\n  success: boolean;\n}\n\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationSession}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nexport function revokeToken(\n  requestOptions: IRevokeTokenOptions\n): Promise<IRevokeTokenResponse> {\n  const url = `${cleanUrl(\n    requestOptions.portal || \"https://www.arcgis.com/sharing/rest\"\n  )}/oauth2/revokeToken/`;\n\n  const token = requestOptions.token;\n  const clientId = requestOptions.clientId;\n\n  delete requestOptions.portal;\n  delete requestOptions.clientId;\n  delete requestOptions.token;\n\n  const options: IRequestOptions = {\n    ...requestOptions,\n    httpMethod: \"POST\",\n    params: {\n      client_id: clientId,\n      auth_token: token\n    }\n  };\n\n  return request(url, options).then((response) => {\n    if (!response.success) {\n      throw new ArcGISRequestError(\n        \"Unable to revoke token\",\n        500,\n        response,\n        url,\n        options\n      );\n    }\n    return response;\n  });\n}\n","/**\n * Encodes a `Uint8Array` to base 64. Used internally for hashing the `code_verifier` and `code_challenge` for PKCE.\n */\nexport function base64UrlEncode(value: any, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n  return win\n    .btoa(String.fromCharCode.apply(null, value))\n    .replace(/\\+/g, \"-\") // replace + with -\n    .replace(/\\//g, \"_\") // replace / with _\n    .replace(/=+$/, \"\"); // trim trailing =\n}\n","import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nexport function generateRandomString(win?: any) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  const randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n  return base64UrlEncode(randomBytes);\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport * as http from \"http\";\nimport { ArcGISAuthError, request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { decodeQueryString } from \"./utils/decode-query-string.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { IUser } from \"./types/user.js\";\nimport { generateToken } from \"./generate-token.js\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token.js\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils.js\";\nimport { IAppAccess, validateAppAccess } from \"./validate-app-access.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { revokeToken } from \"./revoke-token.js\";\nimport { generateCodeChallenge } from \"./utils/generate-code-challenge.js\";\nimport { generateRandomString } from \"./utils/generate-random-string.js\";\nimport { ArcGISAccessDeniedError } from \"./utils/ArcGISAccessDeniedError.js\";\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.fromToken}.\n */\nexport interface IFromTokenOptions {\n  token: string;\n  tokenExpires?: Date;\n  portal?: string;\n}\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.signIn}.\n */\nexport interface ISignInOptions {\n  username: string;\n  password: string;\n  portal?: string;\n}\n\nexport type AuthenticationProvider =\n  | \"arcgis\"\n  | \"facebook\"\n  | \"google\"\n  | \"github\"\n  | \"apple\";\n\n/**\n * Represents a [credential](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)\n * object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\n/**\n * Options for static OAuth 2.0 helper methods on `ArcGISIdentityManager`.\n */\nexport interface IOAuth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n\n  provider?: AuthenticationProvider;\n\n  /**\n   * The requested validity in minutes for a token. Defaults to 20160 (two weeks).\n   */\n  expiration?: number;\n\n  /**\n   * Duration (in minutes) that a token will be valid. Defaults to 20160 (two weeks).\n   *\n   * @deprecated use 'expiration' instead\n   */\n  duration?: number;\n\n  /**\n   * If `true` will use the PKCE oAuth 2.0 extension spec in to authorize the user and obtain a token. A value of `false` will use the deprecated oAuth 2.0 implicit grant type.\n   *\n   * @browserOnly\n   */\n  pkce?: boolean;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * The window features passed to [window.open()](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) when `popup` is true. Defaults to `height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes`\n   *\n   * @browserOnly\n   */\n  popupWindowFeatures?: string;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   *\n   * @nodeOnly\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Sets the color theme of the oAuth 2.0 authorization screen. Will use the system preference or a light theme by default.\n   */\n  style?: \"\" | \"light\" | \"dark\";\n\n  [key: string]: any;\n}\n\n/**\n * Options for the {@linkcode ArcGISIdentityManager} constructor.\n */\nexport interface IArcGISIdentityManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  server?: string;\n}\n\n/**\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `ArcGISIdentityManager` includes helper methods for [OAuth 2.0](/arcgis-rest-js/guides/browser-authentication/) in both browser and server applications.\n *\n * **It is not recommended to construct `ArcGISIdentityManager` directly**. Instead there are several static methods used for specific workflows. The 2 primary workflows relate to oAuth 2.0:\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} + {@linkcode ArcGISIdentityManager.completeOAuth2} - for oAuth 2.0 in browser-only environment.\n * * {@linkcode ArcGISIdentityManager.authorize} + {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode} - for oAuth 2.0 for server-enabled application.\n *\n * Other more specialized helpers for less common workflows also exist:\n *\n * * {@linkcode ArcGISIdentityManager.enablePostMessageAuth} + {@linkcode ArcGISIdentityManager.fromParent} - For when your application needs to pass authentication details between different pages embedded in iframes.\n * * {@linkcode ArcGISIdentityManager.fromToken} - When you have an existing token from another source and would like create an `ArcGISIdentityManager` instance.\n * * {@linkcode ArcGISIdentityManager.fromCredential} - For creating  an `ArcGISIdentityManager` instance from a `Credentials` object in the ArcGIS JS API `IdentityManager`\n * * {@linkcode ArcGISIdentityManager.signIn} - Authenticate directly with a users username and password.\n *\n * Once a manager is created there are additional utilities:\n *\n * * {@linkcode ArcGISIdentityManager.serialize} can be used to create a JSON object representing an instance of `ArcGISIdentityManager`\n * * {@linkcode ArcGISIdentityManager.deserialize} will create a new `ArcGISIdentityManager` from a JSON object created with {@linkcode ArcGISIdentityManager.serialize}\n * * {@linkcode ArcGISIdentityManager.destroy} or {@linkcode ArcGISIdentityManager.signOut} will invalidate any tokens in use by the  `ArcGISIdentityManager`.\n */\nexport class ArcGISIdentityManager implements IAuthenticationManager {\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  /**\n   * The currently authenticated user.\n   */\n  get username() {\n    if (this._username) {\n      return this._username;\n    }\n\n    if (this._user && this._user.username) {\n      return this._user.username;\n    }\n  }\n\n  /**\n   * Returns `true` if these credentials can be refreshed and `false` if it cannot.\n   */\n  get canRefresh() {\n    if (this.username && this.password) {\n      return true;\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the\n   * authentication window will open in a new tab/window. Otherwise, the user will be redirected to the authorization page in their current tab/window and the function will return `undefined`.\n   *\n   * @browserOnly\n   */\n  public static beginOAuth2(\n    options: IOAuth2Options,\n    win?: any\n  ): Promise<ArcGISIdentityManager> | undefined {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    const {\n      portal,\n      provider,\n      clientId,\n      expiration,\n      redirectUri,\n      popup,\n      popupWindowFeatures,\n      locale,\n      params,\n      style,\n      pkce\n    }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        expiration: 20160,\n        popup: true,\n        popupWindowFeatures:\n          \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n        state: options.clientId,\n        locale: \"\",\n        style: \"\",\n        pkce: true\n      },\n      ...options\n    };\n\n    /**\n     * Generate a  random string for the `state` param and store it in local storage. This is used\n     * to validate that all parts of the oAuth process were performed on the same client.\n     */\n    const stateId = generateRandomString(win);\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n\n    win.localStorage.setItem(stateStorageKey, stateId);\n\n    // Start setting up the URL to the authorization screen.\n    let authorizeUrl = `${cleanUrl(portal)}/oauth2/authorize`;\n    const authorizeUrlParams: any = {\n      client_id: clientId,\n      response_type: pkce ? \"code\" : \"token\",\n      expiration: expiration,\n      redirect_uri: redirectUri,\n      state: JSON.stringify({\n        id: stateId,\n        originalUrl: win.location.href // this is used to reset the URL back the original URL upon return\n      }),\n      locale: locale,\n      style: style\n    };\n\n    // If we are authorizing through a specific social provider update the params and base URL.\n    if (provider !== \"arcgis\") {\n      authorizeUrl = `${cleanUrl(portal)}/oauth2/social/authorize`;\n      authorizeUrlParams.socialLoginProviderName = provider;\n      authorizeUrlParams.autoAccountCreateForSocial = true;\n    }\n\n    /**\n     * set a value that will be set to a promise which will later resolve when we are ready\n     * to send users to the authorization page.\n     */\n    let setupAuth;\n\n    if (pkce) {\n      /**\n       * If we are authenticating with PKCE we need to generate the code challenge which is\n       * async so we generate the code challenge and assign the resulting Promise to `setupAuth`\n       */\n      const codeVerifier = generateRandomString(win);\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n\n      win.localStorage.setItem(codeVerifierStorageKey, codeVerifier);\n\n      setupAuth = generateCodeChallenge(codeVerifier, win).then(function (\n        codeChallenge\n      ) {\n        authorizeUrlParams.code_challenge_method = codeChallenge\n          ? \"S256\"\n          : \"plain\";\n\n        authorizeUrlParams.code_challenge = codeChallenge\n          ? codeChallenge\n          : codeVerifier;\n      });\n    } else {\n      /**\n       * If we aren't authenticating with PKCE we can just assign a resolved promise to `setupAuth`\n       */\n      setupAuth = Promise.resolve();\n    }\n\n    /**\n     * Once we are done setting up with (for PKCE) we can start the auth process.\n     */\n    return setupAuth.then(() => {\n      // combine the authorize URL and params\n      authorizeUrl = `${authorizeUrl}?${encodeQueryString(authorizeUrlParams)}`;\n\n      // append additional params passed by the user\n      if (params) {\n        authorizeUrl = `${authorizeUrl}&${encodeQueryString(params)}`;\n      }\n\n      if (popup) {\n        // If we are authenticating a popup we need to return a Promise that will resolve to an ArcGISIdentityManager later.\n        return new Promise((resolve, reject) => {\n          // Add an event listener to listen for when a user calls `ArcGISIdentityManager.completeOAuth2()` in the popup.\n          win.addEventListener(\n            `arcgis-rest-js-popup-auth-${clientId}`,\n            (e: CustomEvent<any>) => {\n              if (e.detail.error === \"access_denied\") {\n                const error = new ArcGISAccessDeniedError();\n                reject(error);\n                return error;\n              }\n\n              if (e.detail.error) {\n                const error = new ArcGISAuthError(\n                  e.detail.errorMessage,\n                  e.detail.error\n                );\n                reject(error);\n                return error;\n              }\n\n              resolve(\n                new ArcGISIdentityManager({\n                  clientId,\n                  portal,\n                  ssl: e.detail.ssl,\n                  token: e.detail.token,\n                  tokenExpires: e.detail.expires,\n                  username: e.detail.username,\n                  refreshToken: e.detail.refreshToken,\n                  refreshTokenExpires: e.detail.refreshTokenExpires\n                })\n              );\n            },\n            {\n              once: true\n            }\n          );\n\n          // open the popup\n          win.open(authorizeUrl, \"oauth-window\", popupWindowFeatures);\n\n          win.dispatchEvent(new CustomEvent(\"arcgis-rest-js-popup-auth-start\"));\n        });\n      } else {\n        // If we aren't authenticating with a popup just send the user to the authorization page.\n        win.location.href = authorizeUrl;\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n   * will be returned to the previous window and the popup will close. Otherwise a new `ArcGISIdentityManager` will be returned. You must pass the same values for `clientId`, `popup`, `portal`, and `pkce` as you used in `beginOAuth2()`.\n   *\n   * @browserOnly\n   */\n  public static completeOAuth2(options: IOAuth2Options, win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    // pull out necessary options\n    const { portal, clientId, popup, pkce }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        popup: true,\n        pkce: true\n      },\n      ...options\n    };\n\n    // pull the saved state id out of local storage\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n    const stateId = win.localStorage.getItem(stateStorageKey);\n\n    // get the params provided by the server and compare the server state with the client saved state\n    const params = decodeQueryString(\n      pkce\n        ? win.location.search.replace(/^\\?/, \"\")\n        : win.location.hash.replace(/^#/, \"\")\n    );\n\n    const state = params && params.state ? JSON.parse(params.state) : undefined;\n\n    function reportError(\n      errorMessage: string,\n      error: string,\n      originalUrl?: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              error,\n              errorMessage\n            }\n          })\n        );\n\n        win.close();\n        return;\n      }\n\n      if (originalUrl) {\n        win.history.replaceState(win.history.state, \"\", originalUrl);\n      }\n\n      if (error === \"access_denied\") {\n        return Promise.reject(new ArcGISAccessDeniedError());\n      }\n\n      return Promise.reject(new ArcGISAuthError(errorMessage, error));\n    }\n\n    // create a function to create the final ArcGISIdentityManager from the token info.\n    function createManager(\n      oauthInfo: IFetchTokenResponse,\n      originalUrl: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              ...oauthInfo\n            }\n          })\n        );\n\n        win.close();\n        return;\n      }\n\n      win.history.replaceState(win.history.state, \"\", originalUrl);\n\n      return new ArcGISIdentityManager({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username,\n        refreshToken: oauthInfo.refreshToken,\n        refreshTokenExpires: oauthInfo.refreshTokenExpires\n      });\n    }\n\n    if (!stateId || !state) {\n      return reportError(\n        \"No authentication state was found, call `ArcGISIdentityManager.beginOAuth2(...)` to start the authentication process.\",\n        \"no-auth-state\"\n      );\n    }\n\n    if (state.id !== stateId) {\n      return reportError(\n        \"Saved client state did not match server sent state.\",\n        \"mismatched-auth-state\"\n      );\n    }\n\n    if (params.error) {\n      const error = params.error;\n      const errorMessage = params.error_description || \"Unknown error\";\n\n      return reportError(errorMessage, error, state.originalUrl);\n    }\n    /**\n     * If we are using PKCE the authorization code will be in the query params.\n     * For implicit grants the token will be in the hash.\n     */\n    if (pkce && params.code) {\n      const tokenEndpoint = cleanUrl(`${portal}/oauth2/token/`);\n\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n      const codeVerifier = win.localStorage.getItem(codeVerifierStorageKey);\n      win.localStorage.removeItem(codeVerifierStorageKey);\n\n      // exchange our auth code for a token + refresh token\n      return fetchToken(tokenEndpoint, {\n        httpMethod: \"POST\",\n        params: {\n          client_id: clientId,\n          code_verifier: codeVerifier,\n          grant_type: \"authorization_code\",\n          redirect_uri: location.href.replace(location.search, \"\"),\n          code: params.code\n        }\n      })\n        .then((tokenResponse) => {\n          return createManager(\n            { ...tokenResponse, ...state },\n            state.originalUrl\n          );\n        })\n        .catch((e) => {\n          return reportError(e.message, e.error, state.originalUrl);\n        });\n    }\n\n    if (!pkce && params.access_token) {\n      return Promise.resolve(\n        createManager(\n          {\n            token: params.access_token,\n            expires: new Date(\n              Date.now() + parseInt(params.expires_in, 10) * 1000\n            ),\n            ssl: params.ssl === \"true\",\n            username: params.username,\n            ...state\n          },\n          state.originalUrl\n        )\n      );\n    }\n\n    return reportError(\"Unknown error\", \"oauth-error\", state.originalUrl);\n  }\n\n  /**\n   * Request credentials information from the parent application\n   *\n   * When an application is embedded into another application via an IFrame, the embedded app can\n   * use `window.postMessage` to request credentials from the host application. This function wraps\n   * that behavior.\n   *\n   * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n   *\n   * Note: The parent application will not respond if the embedded app's origin is not:\n   * - the same origin as the parent or *.arcgis.com (JSAPI)\n   * - in the list of valid child origins (REST-JS)\n   *\n   *\n   * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n   * @browserOnly\n   */\n  public static fromParent(parentOrigin: string, win?: any): Promise<any> {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    // Declare handler outside of promise scope so we can detach it\n    let handler: (event: any) => void;\n    // return a promise that will resolve when the handler receives\n    // session information from the correct origin\n    return new Promise((resolve, reject) => {\n      // create an event handler that just wraps the parentMessageHandler\n      handler = (event: any) => {\n        // ensure we only listen to events from the parent\n        if (event.source === win.parent && event.data) {\n          try {\n            return resolve(ArcGISIdentityManager.parentMessageHandler(event));\n          } catch (err) {\n            return reject(err);\n          }\n        }\n      };\n      // add listener\n      win.addEventListener(\"message\", handler, false);\n      win.parent.postMessage(\n        { type: \"arcgis:auth:requestCredential\" },\n        parentOrigin\n      );\n    }).then((manager) => {\n      win.removeEventListener(\"message\", handler, false);\n      return manager;\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  public static authorize(\n    options: IOAuth2Options,\n    response: http.ServerResponse\n  ) {\n    const { portal, clientId, expiration, redirectUri }: IOAuth2Options = {\n      ...{ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 },\n      ...options\n    };\n\n    response.writeHead(301, {\n      Location: `${portal}/oauth2/authorize?client_id=${clientId}&expiration=${expiration}&response_type=code&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}`\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  public static exchangeAuthorizationCode(\n    options: IOAuth2Options,\n    authorizationCode: string\n  ): Promise<ArcGISIdentityManager> {\n    const { portal, clientId, redirectUri, refreshTokenTTL }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        refreshTokenTTL: 20160\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      params: {\n        grant_type: \"authorization_code\",\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: authorizationCode\n      }\n    }).then((response) => {\n      return new ArcGISIdentityManager({\n        clientId,\n        portal,\n        ssl: response.ssl,\n        redirectUri,\n        refreshToken: response.refreshToken,\n        refreshTokenTTL,\n        refreshTokenExpires: new Date(\n          Date.now() + (refreshTokenTTL - 1) * 60 * 1000\n        ),\n        token: response.token,\n        tokenExpires: response.expires,\n        username: response.username\n      });\n    });\n  }\n\n  public static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new ArcGISIdentityManager({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: new Date(options.refreshTokenExpires),\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: new Date(options.tokenExpires),\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      refreshTokenTTL: options.refreshTokenTTL,\n      server: options.server\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * ArcGISIdentityManager.fromCredential({\n   *   userId: \"jsmith\",\n   *   token: \"secret\"\n   * });\n   * ```\n   *\n   * @returns ArcGISIdentityManager\n   */\n  public static fromCredential(credential: ICredential) {\n    // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n    // Here, we provide default values for them to cover this condition\n    const ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n    const expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n\n    return new ArcGISIdentityManager({\n      portal: credential.server.includes(\"sharing/rest\")\n        ? credential.server\n        : credential.server + `/sharing/rest`,\n      ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(expires)\n    });\n  }\n\n  /**\n   * Handle the response from the parent\n   * @param event DOM Event\n   */\n  private static parentMessageHandler(event: any): ArcGISIdentityManager {\n    if (event.data.type === \"arcgis:auth:credential\") {\n      return ArcGISIdentityManager.fromCredential(event.data.credential);\n    }\n    if (event.data.type === \"arcgis:auth:error\") {\n      const err = new Error(event.data.error.message);\n      err.name = event.data.error.name;\n      throw err;\n    } else {\n      throw new Error(\"Unknown message type.\");\n    }\n  }\n\n  /**\n   * Revokes all active tokens for a provided {@linkcode ArcGISIdentityManager}. The can be considered the equivalent to signing the user out of your application.\n   */\n  public static destroy(manager: ArcGISIdentityManager) {\n    return revokeToken({\n      clientId: manager.clientId,\n      portal: manager.portal,\n      token: manager.refreshToken || manager.token\n    });\n  }\n\n  /**\n   * Create a  {@linkcode ArcGISIdentityManager} from an existing token. Useful for when you have a users token from a different authentication system and want to get a  {@linkcode ArcGISIdentityManager}.\n   */\n  public static fromToken(\n    options: IFromTokenOptions\n  ): Promise<ArcGISIdentityManager> {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Initialize a {@linkcode ArcGISIdentityManager} with a users `username` and `password`. **This method is intended ONLY for applications without a user interface such as CLI tools.**.\n   *\n   * If possible you should use {@linkcode ArcGISIdentityManager.beginOAuth2} to authenticate users in a browser or {@linkcode ArcGISIdentityManager.authorize} for authenticating users with a web server.\n   */\n  public static signIn(options: ISignInOptions) {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  public readonly clientId: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  public readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  public readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  public readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  public readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  public readonly redirectUri: string;\n\n  /**\n   * Duration of new OAuth 2.0 refresh token validity (in minutes).\n   */\n  public readonly refreshTokenTTL: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  public readonly server: string;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  private _user: IUser;\n\n  /**\n   * Hydrated by a call to [getPortal()](#getPortal-summary).\n   */\n  private _portalInfo: any;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n  private _pendingUserRequest: Promise<IUser>;\n  private _pendingPortalRequest: Promise<any>;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  private _username: string;\n\n  /**\n   * Internal list of tokens to 3rd party servers (federated servers) that have\n   *  been created via `generateToken`. The object key is the root URL of the server.\n   */\n  private federatedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * Internal list of 3rd party domains that should receive all cookies (credentials: \"include\").\n   * Used to for PKI and IWA workflows in high security environments.\n   */\n  private trustedDomains: string[];\n\n  private _hostHandler: any;\n\n  constructor(options: IArcGISIdentityManagerOptions) {\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this._username = options.username;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.refreshTokenTTL = options.refreshTokenTTL || 20160;\n    this.server = options.server;\n\n    this.federatedServers = {};\n    this.trustedDomains = [];\n\n    // if a non-federated server was passed explicitly, it should be trusted.\n    if (options.server) {\n      // if the url includes more than '/arcgis/', trim the rest\n      const root = this.getServerRootUrl(options.server);\n\n      this.federatedServers[root] = {\n        token: options.token,\n        expires: options.tokenExpires\n      };\n    }\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * esriId.registerToken(manager.toCredential());\n   * ```\n   *\n   * @returns ICredential\n   */\n  public toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._pendingUserRequest) {\n      return this._pendingUserRequest;\n    } else if (this._user) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingUserRequest = request(url, options).then((response) => {\n        this._user = response;\n        this._pendingUserRequest = null;\n        return response;\n      });\n\n      return this._pendingUserRequest;\n    }\n  }\n\n  /**\n   * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getPortal()\n   *   .then(response => {\n   *     console.log(portal.name); // \"City of ...\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getPortal(requestOptions?: IRequestOptions): Promise<any> {\n    if (this._pendingPortalRequest) {\n      return this._pendingPortalRequest;\n    } else if (this._portalInfo) {\n      return Promise.resolve(this._portalInfo);\n    } else {\n      const url = `${this.portal}/portals/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingPortalRequest = request(url, options).then((response) => {\n        this._portalInfo = response;\n        this._pendingPortalRequest = null;\n        return response;\n      });\n\n      return this._pendingPortalRequest;\n    }\n  }\n\n  /**\n   * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n   *\n   *    * ```js\n   * manager.getUsername()\n   *   .then(response => {\n   *     console.log(response); // \"casey_jones\"\n   *   })\n   * ```\n   */\n  public getUsername() {\n    if (this.username) {\n      return Promise.resolve(this.username);\n    } else {\n      return this.getUser().then((user) => {\n        return user.username;\n      });\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  public getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (canUseOnlineToken(this.portal, url)) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal, \"i\").test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  /**\n   * Get application access information for the current user\n   * see `validateAppAccess` function for details\n   *\n   * @param clientId application client id\n   */\n  public validateAppAccess(clientId: string): Promise<IAppAccess> {\n    return this.getToken(this.portal).then((token) => {\n      return validateAppAccess(token, clientId);\n    });\n  }\n\n  public toJSON(): IArcGISIdentityManagerOptions {\n    return {\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      refreshTokenTTL: this.refreshTokenTTL,\n      server: this.server\n    };\n  }\n\n  public serialize() {\n    return JSON.stringify(this);\n  }\n  /**\n   * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n   * and creating a ArcGISIdentityManager, the app can then enable \"post message\" style authentication by calling\n   * this method.\n   *\n   * Internally this adds an event listener on window for the `message` event\n   *\n   * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n   */\n  public enablePostMessageAuth(validChildOrigins: string[], win?: any): any {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n    win.addEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n   * to transition routes, it should call `ArcGISIdentityManager.disablePostMessageAuth()` to remove\n   * the event listener and prevent memory leaks\n   */\n  public disablePostMessageAuth(win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    win.removeEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  public refreshCredentials(requestOptions?: ITokenRequestOptions) {\n    // make sure subsequent calls to getUser() don't returned cached metadata\n    this._user = null;\n\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n  }\n\n  /**\n   * Determines the root of the ArcGIS Server or Portal for a given URL.\n   *\n   * @param url the URl to determine the root url for.\n   */\n  public getServerRootUrl(url: string) {\n    const [root] = cleanUrl(url).split(\n      /\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/\n    );\n    const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n    const [domain, ...path] = domainAndPath.split(\"/\");\n\n    // only the domain is lowercased because in some cases an org id might be\n    // in the path which cannot be lowercased.\n    return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n  }\n\n  /**\n   * Returns the proper [`credentials`] option for `fetch` for a given domain.\n   * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n   * Used internally by underlying request methods to add support for specific security considerations.\n   *\n   * @param url The url of the request\n   * @returns \"include\" or \"same-origin\"\n   */\n  public getDomainCredentials(url: string): RequestCredentials {\n    if (!this.trustedDomains || !this.trustedDomains.length) {\n      return \"same-origin\";\n    }\n\n    return this.trustedDomains.some((domainWithProtocol) => {\n      return url.startsWith(domainWithProtocol);\n    })\n      ? \"include\"\n      : \"same-origin\";\n  }\n\n  /**\n   * Convenience method for {@linkcode ArcGISIdentityManager.destroy} for this instance of `ArcGISIdentityManager`\n   */\n  public signOut() {\n    return ArcGISIdentityManager.destroy(this);\n  }\n\n  /**\n   * Return a function that closes over the validOrigins array and\n   * can be used as an event handler for the `message` event\n   *\n   * @param validOrigins Array of valid origins\n   */\n  private createPostMessageHandler(\n    validOrigins: string[]\n  ): (event: any) => void {\n    // return a function that closes over the validOrigins and\n    // has access to the credential\n    return (event: any) => {\n      // Verify that the origin is valid\n      // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n      // is in the array via exact match. More info about avoiding postMessage xss issues here\n      // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n      const isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n      // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n      // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n      // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n      // use a list of valid origins\n\n      // Ensure the message type is something we want to handle\n      const isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n      // Ensure we don't pass an expired session forward\n      const isTokenValid = this.tokenExpires.getTime() > Date.now();\n\n      if (isValidOrigin && isValidType) {\n        let msg = {};\n        if (isTokenValid) {\n          const credential = this.toCredential();\n          // the following line allows us to conform to our spec without changing other depended-on functionality\n          // https://github.com/Esri/arcgis-rest-js/blob/master/packages/arcgis-rest-request/post-message-auth-spec.md#arcgisauthcredential\n          credential.server = credential.server.replace(\"/sharing/rest\", \"\");\n          msg = {\n            type: \"arcgis:auth:credential\",\n            credential\n          };\n        } else {\n          msg = {\n            type: \"arcgis:auth:error\",\n            error: {\n              name: \"tokenExpiredError\",\n              message:\n                \"Token was expired, and not returned to the child application\"\n            }\n          };\n        }\n\n        event.source.postMessage(msg, event.origin);\n      }\n    };\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `federatedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    // Federated servers may have inconsistent casing, so lowerCase it\n    const root = this.getServerRootUrl(url);\n    const existingToken = this.federatedServers[root];\n\n    if (\n      existingToken &&\n      existingToken.expires &&\n      existingToken.expires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(\n      () => {\n        return request(`${root}/rest/info`, {\n          credentials: this.getDomainCredentials(url)\n        })\n          .then((response) => {\n            if (response.owningSystemUrl) {\n              /**\n               * if this server is not owned by this portal\n               * bail out with an error since we know we wont\n               * be able to generate a token\n               */\n              if (!isFederated(response.owningSystemUrl, this.portal)) {\n                throw new ArcGISAuthError(\n                  `${url} is not federated with ${this.portal}.`,\n                  \"NOT_FEDERATED\"\n                );\n              } else {\n                /**\n                 * if the server is federated, use the relevant token endpoint.\n                 */\n                return request(\n                  `${response.owningSystemUrl}/sharing/rest/info`,\n                  requestOptions\n                );\n              }\n            } else if (\n              response.authInfo &&\n              this.federatedServers[root] !== undefined\n            ) {\n              /**\n               * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n               * federation, but the root server url is recognized, use its built in token endpoint.\n               */\n              return Promise.resolve({\n                authInfo: response.authInfo\n              });\n            } else {\n              throw new ArcGISAuthError(\n                `${url} is not federated with any portal and is not explicitly trusted.`,\n                \"NOT_FEDERATED\"\n              );\n            }\n          })\n          .then((response: any) => {\n            return response.authInfo.tokenServicesUrl;\n          })\n          .then((tokenServicesUrl: string) => {\n            // an expired token cant be used to generate a new token\n            if (this.token && this.tokenExpires.getTime() > Date.now()) {\n              return generateToken(tokenServicesUrl, {\n                params: {\n                  token: this.token,\n                  serverUrl: url,\n                  expiration: this.tokenDuration,\n                  client: \"referer\"\n                }\n              });\n              // generate an entirely fresh token if necessary\n            } else {\n              return generateToken(tokenServicesUrl, {\n                params: {\n                  username: this.username,\n                  password: this.password,\n                  expiration: this.tokenDuration,\n                  client: \"referer\"\n                }\n              }).then((response: any) => {\n                this._token = response.token;\n                this._tokenExpires = new Date(response.expires);\n                return response;\n              });\n            }\n          })\n          .then((response) => {\n            this.federatedServers[root] = {\n              expires: new Date(response.expires),\n              token: response.token\n            };\n            delete this._pendingTokenRequests[root];\n            return response.token;\n          });\n      }\n    );\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (this.token && !this.tokenExpires) {\n      return Promise.resolve(this.token);\n    }\n\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshCredentials(\n        requestOptions\n      ).then((manager) => {\n        this._pendingTokenRequests[this.portal] = null;\n        return manager.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const options = {\n      params: {\n        username: this.username,\n        password: this.password,\n        expiration: this.tokenDuration\n      },\n      ...requestOptions\n    };\n    return generateToken(`${this.portal}/generateToken`, options).then(\n      (response: any) => {\n        this._token = response.token;\n        this._tokenExpires = new Date(response.expires);\n        return this;\n      }\n    );\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() < Date.now()\n    ) {\n      return this.refreshRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(\n      (response) => {\n        this._token = response.token;\n        this._tokenExpires = response.expires;\n        return this;\n      }\n    );\n  }\n\n  /**\n   * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n   * `tokenExpires`.\n   */\n  private refreshRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(\n      (response) => {\n        this._token = response.token;\n        this._tokenExpires = response.expires;\n        this._refreshToken = response.refreshToken;\n        this._refreshTokenExpires = new Date(\n          Date.now() + (this.refreshTokenTTL - 1) * 60 * 1000\n        );\n        return this;\n      }\n    );\n  }\n\n  /**\n   * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n   * so we can check them later.\n   *\n   * @returns this\n   */\n  private fetchAuthorizedDomains() {\n    // if this token is for a specific server or we don't have a portal\n    // don't get the portal info because we cant get the authorizedCrossOriginDomains\n    if (this.server || !this.portal) {\n      return Promise.resolve(this);\n    }\n\n    return this.getPortal().then((portalInfo) => {\n      /**\n       * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n       * normalizes to https://secure.esri.com so we can use startsWith later.\n       */\n      if (\n        portalInfo.authorizedCrossOriginDomains &&\n        portalInfo.authorizedCrossOriginDomains.length\n      ) {\n        this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n          .filter((d: string) => !d.startsWith(\"http://\"))\n          .map((d: string) => {\n            if (d.startsWith(\"https://\")) {\n              return d;\n            } else {\n              return `https://${d}`;\n            }\n          });\n      }\n      return this;\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager}.\n */ /* istanbul ignore next */\nexport function UserSession(options: IArcGISIdentityManagerOptions) {\n  console.log(\n    \"DEPRECATED:, 'UserSession' is deprecated. Use 'ArcGISIdentityManagerOptions' instead.\"\n  );\n\n  return new ArcGISIdentityManager(options);\n}\n","import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to hash the codeVerifier using sha256\n */\nexport function generateCodeChallenge(codeVerifier: string, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  if (codeVerifier && win.isSecureContext && win.crypto && win.crypto.subtle) {\n    const encoder = new win.TextEncoder();\n    const bytes = encoder.encode(codeVerifier);\n\n    return win.crypto.subtle\n      .digest(\"SHA-256\", bytes)\n      .then((buffer) => base64UrlEncode(new Uint8Array(buffer), win));\n  }\n\n  return Promise.resolve(null);\n}\n","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\n\n/**\n * Request app-specific token, passing in the token for the current app.\n *\n * This call returns a token after performing the same checks made by validateAppAccess.\n * It returns an app-specific token of the signed-in user only if the user has access\n * to the app and the encrypted platform cookie is valid.\n *\n * A scenario where an app would use this is if it is iframed into another platform app\n * and receives credentials via postMessage. Those credentials contain a token that is\n * specific to the host app, so the embedded app would use `exchangeToken` to get one\n * that is specific to itself.\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token\n * @param clientId application\n * @param portal\n */\nexport function exchangeToken(\n  token: string,\n  clientId: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<string> {\n  const url = `${portal}/oauth2/exchangeToken`;\n  const ro = {\n    method: \"POST\",\n    params: {\n      f: \"json\",\n      client_id: clientId,\n      token\n    }\n  } as IRequestOptions;\n  // make the request and return the token\n  return request(url, ro).then((response) => response.token);\n}\n\n/**\n * Response from the `platformSelf(...)` function.\n */\nexport interface IPlatformSelfResponse {\n  /**\n   * Username of the user the encrypted cookie was issued for\n   */\n  username: string;\n  /**\n   * Token the consuming application can use, It is tied to the\n   * clientId used in the `platformSelf` call\n   */\n  token: string;\n  /**\n   * Token expiration, in seconds-from-now\n   */\n  expires_in: number;\n}\n\n/**\n * Request a token for a specific application using the esri_aopc encrypted cookie\n *\n * When a client app boots up, it will know its clientId and the redirectUri for use\n * in the normal /oauth/authorize pop-out oAuth flow.\n *\n * If the app sees an `esri_aopc` cookie (only set if the app is hosted on *.arcgis.com),\n * it can call the /oauth2/platformSelf end-point passing in the clientId and redirectUri\n * in headers, and it will receive back an app-specific token, assuming the user has\n * access to the app.\n *\n * Since there are scenarios where an app can boot using credentials/token from localstorage\n * but those credentials are not for the same user as the esri_aopc cookie, it is recommended that\n * an app check the returned username against any existing identity they may have loaded.\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * ```js\n * // convert the encrypted platform cookie into a ArcGISIdentityManager\n * import { platformSelf, ArcGISIdentityManager } from '@esri/arcgis-rest-auth';\n *\n * const portal = 'https://www.arcgis.com/sharing/rest';\n * const clientId = 'YOURAPPCLIENTID';\n *\n * // exchange esri_aopc cookie\n * return platformSelf(clientId, 'https://your-app-redirect-uri', portal)\n * .then((response) => {\n *  const currentTimestamp = new Date().getTime();\n *  const tokenExpiresTimestamp = currentTimestamp + (response.expires_in * 1000);\n *  // Construct the session and return it\n *  return new ArcGISIdentityManager({\n *    portal,\n *    clientId,\n *    username: response.username,\n *    token: response.token,\n *    tokenExpires: new Date(tokenExpiresTimestamp),\n *    ssl: true\n *  });\n * })\n *\n * ```\n *\n *\n * @param clientId\n * @param redirectUri\n * @param portal\n */\nexport function platformSelf(\n  clientId: string,\n  redirectUri: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<IPlatformSelfResponse> {\n  // TEMPORARY: the f=json should not be needed, but currently is\n  const url = `${portal}/oauth2/platformSelf?f=json`;\n  const ro = {\n    method: \"POST\",\n    headers: {\n      \"X-Esri-Auth-Client-Id\": clientId,\n      \"X-Esri-Auth-Redirect-Uri\": redirectUri\n    },\n    // Note: request has logic to include the cookie\n    // for platformSelf calls w/ the X-Esri-Auth-Client-Id header\n    params: {\n      f: \"json\"\n    }\n  } as IRequestOptions;\n  // make the request and return the token\n  return request(url, ro);\n}\n"],"names":["requiresFormData","params","Object","keys","some","key","value","toParam","constructor","name","processParams","newParams","forEach","param","firstElementType","JSON","stringify","join","valueOf","Array","isArray","encodeParam","map","arrayElem","encodeURIComponent","encodeQueryString","FormData","globalThis","File","Blob","encodeFormData","forceFormData","useFormData","formData","filename","append","ArcGISRequestError","Error","message","code","response","url","options","super","actualProto","prototype","setPrototypeOf","this","originalMessage","warn","console","apply","getFetch","Promise","resolve","fetch","Headers","Response","Request","NODEJS_DEFAULT_REFERER_HEADER","setDefaultRequestOptions","hideWarnings","authentication","DEFAULT_ARCGIS_REQUEST_OPTIONS","getDefaultRequestOptions","httpMethod","f","ArcGISAuthError","retry","getSession","retryLimit","tries","retryRequest","reject","then","session","newOptions","internalRequest","catch","e","checkForErrors","originalAuthError","error","messageCode","errorCode","status","parse","statusMessage","requestOptions","defaults","headers","rawResponse","fetchOptions","method","credentials","indexOf","rawToken","portal","getToken","startsWith","suppressWarnings","ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING","originalUrl","err","token","length","getDomainCredentials","requestHeaders","hideToken","window","urlWithQueryString","maxUrlLength","RegExp","test","body","referer","ok","statusText","json","text","blob","data","truncatedUrl","toLowerCase","split","federatedServers","expires","Date","now","request","canRefresh","refreshCredentials","appendCustomParams","customOptions","baseOptions","reduce","ArcGISAccessDeniedError","cleanUrl","trim","slice","decodeParam","decodeURIComponent","decodeQueryString","query","replace","acc","entry","ErrorTypes","fetchToken","r","access_token","username","expires_in","ssl","refresh_token","refreshToken","refresh_token_expires_in","refreshTokenExpires","ApplicationCredentialsManager","clientId","clientSecret","duration","fromCredentials","getTime","_pendingTokenRequest","client_id","client_secret","grant_type","expiration","ApplicationSession","log","ApiKeyManager","fromKey","apiKey","ApiKey","generateToken","location","host","arcgisOnlineUrlRegex","isOnline","normalizeOnlinePortalUrl","portalUrl","getOnlineEnvironment","subdomain","match","pop","includes","isFederated","owningSystemUrl","normalizedPortalUrl","normalizedOwningSystemUrl","canUseOnlineToken","requestUrl","portalIsOnline","requestIsOnline","portalEnv","requestEnv","validateAppAccess","revokeToken","auth_token","success","base64UrlEncode","win","btoa","String","fromCharCode","generateRandomString","crypto","getRandomValues","Uint8Array","ArcGISIdentityManager","_refreshToken","_refreshTokenExpires","_username","password","_token","_tokenExpires","tokenExpires","provider","tokenDuration","redirectUri","refreshTokenTTL","server","trustedDomains","root","getServerRootUrl","_pendingTokenRequests","_user","beginOAuth2","popup","popupWindowFeatures","locale","style","pkce","state","stateId","stateStorageKey","localStorage","setItem","authorizeUrl","authorizeUrlParams","response_type","redirect_uri","id","href","setupAuth","socialLoginProviderName","autoAccountCreateForSocial","codeVerifier","codeVerifierStorageKey","isSecureContext","subtle","bytes","TextEncoder","encode","digest","buffer","generateCodeChallenge","codeChallenge","code_challenge_method","code_challenge","addEventListener","detail","errorMessage","once","open","dispatchEvent","CustomEvent","completeOAuth2","getItem","search","hash","undefined","reportError","removeItem","opener","close","history","replaceState","createManager","oauthInfo","error_description","tokenEndpoint","code_verifier","tokenResponse","parseInt","fromParent","parentOrigin","handler","event","source","parent","parentMessageHandler","postMessage","type","manager","removeEventListener","authorize","writeHead","Location","end","exchangeAuthorizationCode","authorizationCode","deserialize","str","fromCredential","credential","userId","destroy","fromToken","getUser","signIn","toCredential","_pendingUserRequest","getPortal","_pendingPortalRequest","_portalInfo","getUsername","user","getFreshToken","getTokenForServer","toJSON","serialize","enablePostMessageAuth","validChildOrigins","_hostHandler","createPostMessageHandler","disablePostMessageAuth","refreshWithUsernameAndPassword","refreshWithRefreshToken","protocol","domainAndPath","domain","path","domainWithProtocol","signOut","validOrigins","isValidOrigin","origin","isValidType","isTokenValid","msg","existingToken","fetchAuthorizedDomains","authInfo","tokenServicesUrl","serverUrl","client","refreshRefreshToken","portalInfo","authorizedCrossOriginDomains","filter","d","UserSession","exchangeToken","platformSelf"],"mappings":"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"}