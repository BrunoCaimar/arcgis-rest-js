/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/categories": {
    /**
     * A category describes a type of place, such as "movie theater" or "zoo".
     * The places service has over 1,000 categories (or types) of place. The
     * categories fall into ten general groups: Arts and Entertainment, Business
     * and Professional Services, Community and Government, Dining and Drinking,
     * Events, Health and Medicine, Landmarks and Outdoors, Retail, Sports and
     * Recreation, and Travel and Transportation.
     *
     * There are up to four levels of categories. For example: "Travel and
     * Transportation" (Level 1), "Transport Hub" (Level 2), "Airport"
     * (Level  3) and "Airport Terminal" (Level 4).
     *
     * The table below shows the top-level of categories, along with a
     * selection of level two categories.
     *
     * The `/categories` endpoint fetches the latest set of place categories.
     * The request returns all categories including their label and
     * `categoryId`. You should use this endpoint to fetch the latest set of
     * categories when your app starts up. Each category contains an unique ID
     * that you can use to perform a `near-point` or `within-extent` search.
     *
     * You can also reduce the list to a subset of categories using the
     * `filter` parameter. For example, searching for "coffee" would return
     * categories including:
     *
     * - "Coffee Shop"
     *
     * - "Coffee Roaster"
     *
     * - "Turkish Coffeehouse"
     *
     * |Category Label | Category ID | Level 2|
     * |--- | --- | ---|
     * |Arts and Entertainment | 10000 | Amusement Park (10001), Art Gallery (10004), Casino (10008), Exhibit (10016), Movie Theater (10024), Museum (10027), Stadium (10051), Water Park (10055), Zoo (10056), ...|
     * |Business and Professional Services | 11000 | Construction (11028), Convention Center (11029), Food and Beverage Service (11056), Health and Beauty Service (11061), Industrial Estate (11106), Office (11124), ...|
     * |Community and Government | 12000 | Education (12009), Organization (12082), Government Building (12064), Community Center (12004), Library (12080), Utility Company (12115), ...|
     * |Dining and Drinking | 13000 | Bakery (13002), Bar (13003), Cafes, Coffee, and Tea House (13032), Restaurant (13065, ...|
     * |Event | 14000 |  Conference (14001), Convention (14002), Entertainment Event (14003), Marketplace (14009), ...|
     * |Health and Medicine | 15000 | Dentist (15007), Emergency Service (15008), Hospital (15014), Medical Center (15016), Optometrist (15024), Physician (15027), Veterinarian (15054), ...|
     * |Landmarks and Outdoors | 16000 | Beach (16003), Building / Structure (16007), Campground (16008), Harbor / Marina (16018), Historic and Protected Site (16020), Monument (16026), Nature Preserve (16028), Park (16032), ...|
     * |Retail | 17000 | Arts and Crafts Store (17003), Bookstore (17018), Convenience Store (17029), Department Store (17033)|
     * |Sports and Recreation | 18000 | Athletic Field (18001), Baseball (18002), Basketball (18006), Football (18013), Golf (18016), Gym and Studio (18021), ...|
     * |Travel and Transportation | 19000 | Bike Rental (19002), Cruise (19005), Electric Vehicle Charging Station (19006), Fuel Station (19007), Lodging (19009), Transport Hub (19030), ...|
     *
     * **Note**: Category details are subject to change as new types of places
     * are introduced.
     */
    get: operations["categoriesGet"];
  };
  "/categories/{categoryId}": {
    /** The `/categories/{categoryId}` operation returns all the groups to which the category belongs. You must supply a `category ID` to use this operation. */
    get: operations["categoriesCategoryIdGet"];
  };
  "/places/near-point": {
    /**
     * The `/places/near-point` operation finds places that are within a given
     * radius of a specified location. The returned places contain basic data
     * such as name, category and location.
     *
     * To perform the request, you must supply the `x` and `y` coordinates of
     * the point from which to search. Optionally, you can also specify the:
     *
     * - Search radius (up to 10,000 meters)
     * - Category IDs
     * - Search text
     *
     * If the `maxResultsExceeded` property in the response is `true`, then you
     * can page through the results to return more places. The maximum number
     * of places that cane be paged to is 200.
     *
     * **Note**: You cannot permanently store places. Please see the [Terms of
     * use](https://developers.arcgis.com/documentation/mapping-apis-and-services/deployment/terms-of-use/).
     */
    get: operations["nearPointGet"];
  };
  "/places/within-extent": {
    /**
     * The `/places/within-extent` operation searches for places within an extent (bounding box).
     *
     * You must supply the `xmin`,
     * `ymin`, `xmax` and `ymax` coordinates to define the extent. The maximum width
     * and height of an extent that can be used in a search is 20,000 meters.
     *
     * You can also provide multiple categories or search text to find specific types of places within the extent.
     *
     * The default number of places returned (`pageSize`) is 10. The maximum `pageSize` value is 20.
     *
     * If the `maxResultsExceeded` property in the response is `true`, then you
     * can page through the results to return more places. The maximum number
     * of places that cane be paged to is 200.
     *
     * **Note**: You cannot permanently store places. Please see the [Terms of
     * use](https://developers.arcgis.com/documentation/mapping-apis-and-services/deployment/terms-of-use/).
     */
    get: operations["withinExtentGet"];
  };
  "/places/{placeId}": {
    /**
     * The `/places/{placeId}` operation returns details for a place.
     *
     * To request details, you use the `requestedFields` parameter to specify
     * the fields and the attributes you want from the **Place**,
     * **Address**, and/or **Details** price groups.
     *
     * It is always recommended to specify the fields you want, however, you
     * can also use `requestedFields=all` to return all of the attributes
     * available. By default, The `placeId` attribute is always returned in addition
     * to the other attributes you requested.
     *
     * The attributes available for places may vary. For example, opening hours
     * may not be available (or applicable) for geographic places or landmarks.
     *
     * You will only be charged for attributes that contain valid values for
     * the requested fields. If no data is available for the requested field,
     * `null` or an empty collection  is returned and you are not charged. You are only charged once if
     * one or more attributes with valid values are returned from a price
     * group. To learn more, go to
     * [Pricing](https://places-service-preview.sites.afd.arcgis.com/rest/places/#pricing).
     *
     * Field | Price group
     * --- | ---
     * name | Place
     * categoryId | Place
     * address:country | Address
     * address:adminRegion | Address
     * address:region | Address
     * address:streetAddress | Address
     * address:extended | Address
     * address:poBox | Address
     * address:postcode | Address
     * address:postTown | Address
     * address:locality | Address
     * address:neighborhood | Address
     * address:censusBlockId | Address
     * address:designatedMarketArea | Address
     * contactInfo:telephone | Details
     * contactInfo:website | Details
     * contactInfo:fax | Details
     * contactInfo:email | Details
     * socialMedia:facebookId | Details
     * socialMedia:instagram | Details
     * socialMedia:twitter | Details
     * chains | Details
     * description | Details
     * rating:user | Details
     * rating:price | Details
     * hours:opening | Details
     * hours:popular | Details
     * hours:openingText | Details
     *
     * **Note**: You cannot permanently store places. Please see the [Terms of
     * use](https://developers.arcgis.com/documentation/mapping-apis-and-services/deployment/terms-of-use/).
     */
    get: operations["placeIdGet"];
  };
}

export interface components {
  schemas: {
    /** @example 722d8e1ba4db8ec5ef256b09cf060782 */
    PlaceId: string;
    /**
     * @description Property indicating whether the query resulted in more than `200` places.
     *
     * The maximum number of places that can be returned in total is `200`. If
     * a request reaches this limit without returning all of the available
     * places, this response property will be set to `true`.
     *
     * You can refine your query to reduce the number of places returned. For
     * example, you could:
     *
     * - Search a smaller geographic area.
     *
     * - Use category Ids to specify the type of place you are looking for.
     *
     * - Supply a search text string.
     *
     * @example true
     */
    MaxResultsExceeded: boolean;
    /**
     * @description A result of searching for places using a `places/near-point` request.
     *
     * The result object includes a single place that satisfied the search and
     * the distance from the search point, in meters.
     */
    NearPointResult: {
      /**
       * @description The unique Id of this place.
       *
       * This place Id can be passed to the `places/{placeId}` endpoint to
       * retrieve additional details.
       *
       * @example 722d8e1ba4db8ec5ef256b09cf060782
       */
      placeId: components["schemas"]["PlaceId"];
      /**
       * @description The location of this place as a WGS84 point.
       *
       * @example {
       *   "x": -117.194769,
       *   "y": 34.057289
       * }
       */
      location: components["schemas"]["Point"];
      /**
       * @description A list of category objects for a place.
       *
       * Categories are uniquely identified by a `categoryId`. For example,
       * `17119` identifies a "Bicycle Store" and `10051` identifies a
       * "Stadium". Note that a single place can belong to multiple
       * categories (for example, a petrol station could also have a
       * super-market).
       *
       * @example [
       *   {
       *     "categoryId": 17119,
       *     "label": "Bicycle Store"
       *   }
       * ]
       */
      categories: components["schemas"]["Category"][];
      /**
       * @description The name of the place, or point of interest.
       * You can search for places by name using the `searchText` property in
       * a `places/near-point` or `places/within-extent` request.
       *
       * @example Esri International
       */
      name: string;
      /**
       * @description The distance, in meters, from the place to the search point of a 'places/near-point` query.
       *
       * @example 50
       */
      distance: number;
    };
    /**
     * @description A result of searching for places using a `places/within-extent` request.
     *
     * The result object includes a single place that satisfied the search.
     */
    WithinExtentResult: {
      /**
       * @description The unique Id of this place.
       *
       * This place Id can be passed to the `places/{placeId}` endpoint to
       * retrieve additional details.
       *
       * @example 722d8e1ba4db8ec5ef256b09cf060782
       */
      placeId: components["schemas"]["PlaceId"];
      /**
       * @description The location of this place as a WGS84 point.
       *
       * @example {
       *   "x": -117.194769,
       *   "y": 34.057289
       * }
       */
      location: components["schemas"]["Point"];
      /**
       * @description A list of category objects for a place.
       *
       * Categories are uniquely identified by a `categoryId`. For example,
       * `17119` identifies a "Bicycle Store" and `10051` identifies a
       * "Stadium". Note that a single place can belong to multiple
       * categories (for example, a petrol station could also have a
       * super-market).
       *
       * @example [
       *   {
       *     "categoryId": 17119,
       *     "label": "Bicycle Store"
       *   }
       * ]
       */
      categories: components["schemas"]["Category"][];
      /**
       * @description The name of the place, or point of interest.
       * You can search for places by name using the `searchText` property in
       * a `places/near-point` or `places/within-extent` request.
       *
       * @example Esri International
       */
      name: string;
    };
    /**
     * @description The additional details for a `Place`, including address, contact details, opening hours, and rating.
     *
     * You can request additional details for a place by using the `placeId` in
     * a `places/{placeId}` request. Use the `requestedFields` query parameter
     * to choose the fields or attributes that are included in the response.
     */
    PlaceDetails: {
      /**
       * @description The unique Id of this place.
       *
       * @example 722d8e1ba4db8ec5ef256b09cf060782
       */
      placeId: components["schemas"]["PlaceId"];
      /**
       * @description A list of category objects for a place.
       *
       * Categories are uniquely identified by a `categoryId`. For example,
       * `17119` identifies a "Bicycle Store" and `10051` identifies a
       * "Stadium". Note that a single place can belong to multiple
       * categories (for example, a petrol station could also have a
       * super-market).
       *
       * This property is part of the "Place" attribute group.
       *
       * @example [
       *   {
       *     "categoryId": 17119,
       *     "label": "Bicycle Store"
       *   }
       * ]
       */
      categories?: components["schemas"]["Category"][];
      /**
       * @description The name of the place, or point of interest.
       *
       * This property is part of the "Place" attribute group.
       *
       * @example Esri International
       */
      name?: string;
      /**
       * @description A text description of the place.
       *
       * This property is part of the "Details" attribute group.
       *
       * @example Esri is the global market leader in geographic information system
       * (GIS) technology, location intelligence, mapping software, and
       * spatial analytics. Esri software is deployed in more than 350,000
       * organizations and 75 percent of Fortune 500 companies.
       */
      description?: string | null;
      /**
       * @description The address of the place or point of interest (POI).
       *
       * This object and child properties are part of the "Address" attribute
       * group.
       */
      address?: components["schemas"]["Address"];
      /**
       * @description Contact information for the place, such as the telephone number or email address.
       *
       * This object and child properties are part of the "Details" attribute
       * group.
       */
      contactInfo?: components["schemas"]["ContactInfo"];
      /**
       * @description Social media information associated with the place.
       *
       * This object and child properties are part of the "Details" attribute
       * group.
       */
      socialMedia?: components["schemas"]["SocialMedia"];
      /**
       * @description The operating hours for the place, including hours of opening and popular times.
       *
       * This object and child properties are part of the "Details" attribute
       * group.
       */
      hours?: components["schemas"]["Hours"];
      /**
       * @description Rating information supplied by users of the place.
       *
       * This object and child properties are part of the "Details" attribute
       * group.
       */
      rating?: components["schemas"]["Rating"];
      /**
       * @description Information about all the chains the place belongs to.
       *
       * This object and child properties are part of the "Details" attribute
       * group.
       *
       * @example [
       *   {
       *     "name": "Starbucks"
       *   }
       * ]
       */
      chains?: components["schemas"]["ChainInfo"][];
    };
    /** @example 17119 */
    CategoryId: string;
    /**
     * @description Represents the category of a place.
     *
     * You can get more information on categories from the `places/categories`
     * endpoint.
     */
    Category: {
      /**
       * @description The category Id uniquely identifies this category or type of place.
       *
       * The name of the category can be looked up using the
       * `places/categories` endpoint. For example, 17119 is the id for a
       * "Bicycle Store".
       *
       * @example 17119
       */
      categoryId: components["schemas"]["CategoryId"];
      /**
       * @description The label that describes the category.
       *
       * @example Bicycle Store
       */
      label: string;
    };
    /**
     * @description Provides details about a category or type of place.
     *
     * Categories are hierarchical so that you can filter places based on
     * specific categories such as "Provençal Restaurant", or with more generic
     * types such as "Restaurant". A category such as "Provençal Restaurant"
     * includes the details of its more generic parent, such as "French
     * Restaurant".
     */
    CategoryDetails: {
      /**
       * @description A unique identifying string for a category.
       *
       * This matches the `categoryId` of a place's `category` property.
       *
       * @example 17119
       */
      categoryId: components["schemas"]["CategoryId"];
      /** @description The full list of labels that describe the category, including its more generic parent categories. */
      fullLabel: string[];
      /** @description The list of parent category Ids for this category. */
      parents?: string[];
    };
    /**
     * Format: double
     * @description An x-coordinate, or longitude, in WGS84 decimal degrees.
     * @example -117.194769
     */
    XCoord: number;
    /**
     * Format: double
     * @description A y-coordinate, or latitude, in WGS84 decimal degrees.
     * @example 34.057289
     */
    YCoord: number;
    /**
     * Format: float
     * @description A search distance in meters.
     *
     * @default 1000
     * @example 50
     */
    SearchDistance: number;
    /**
     * @description A point defined in WGS84 decimal degrees.
     *
     * @example {
     *   "x": -117.194769,
     *   "y": 34.057289
     * }
     */
    Point: {
      /** @description The x, or longitude, of this location in WGS84 decimal degrees. */
      x: components["schemas"]["XCoord"];
      /** @description The y, or latitude, of this location in WGS84 decimal degrees. */
      y: components["schemas"]["YCoord"];
    };
    /**
     * @description A point defined in WGS84 decimal degrees.
     *
     * @example {
     *   "x": -117.194769,
     *   "y": 34.057289
     * }
     */
    NullablePoint: {
      /** @description The x, or longitude, of this location in WGS84 decimal degrees. */
      x: components["schemas"]["XCoord"];
      /** @description The y, or latitude, of this location in WGS84 decimal degrees. */
      y: components["schemas"]["YCoord"];
    } | null;
    /**
     * @description A pair of times defining the start and end of a time period.
     *
     * For example, this could define opening hours or popular hours. Hours are
     * shown in 24-hour time in the local timezone of the place or POI.
     *
     * Where a time range is 24-hours (for example a venue that is open 24-hours),
     * the `from` property will be 00:00 and the `to` property will be 23:59.
     *
     * @example {
     *   "from": "10:00",
     *   "to": "13:00"
     * }
     */
    TimeRange: {
      /**
       * @description The start of a time range in the format "HH:MM".
       * @example 09:00
       */
      from: string;
      /**
       * @description The end of a time range in the format "HH:MM".
       * @example 15:30
       */
      to: string;
    };
    /**
     * @description The opening or popular hours for a place.
     *
     * Opening hours are shown by day of the week. Each day can have several
     * pairs of from and to times. For example, if a coffee shop is open from
     * 9:00 until 12:00 and then again from 13:00 until 17:00, it would contain
     * two pairs of opening/closing times: 9:00 paired with 12:00 and 13:00
     * with 17:00. Hours are shown in 24-hour time in the local timezone of the
     * place or POI.
     */
    HoursByDay: {
      /**
       * @example [
       *   {
       *     "from": "09:00",
       *     "to": "17:00"
       *   }
       * ]
       */
      monday?: components["schemas"]["TimeRange"][];
      /**
       * @example [
       *   {
       *     "from": "09:00",
       *     "to": "17:00"
       *   }
       * ]
       */
      tuesday?: components["schemas"]["TimeRange"][];
      /**
       * @example [
       *   {
       *     "from": "09:00",
       *     "to": "12:00"
       *   },
       *   {
       *     "from": "13:00",
       *     "to": "17:00"
       *   }
       * ]
       */
      wednesday?: components["schemas"]["TimeRange"][];
      /**
       * @example [
       *   {
       *     "from": "09:00",
       *     "to": "17:00"
       *   }
       * ]
       */
      thursday?: components["schemas"]["TimeRange"][];
      /**
       * @example [
       *   {
       *     "from": "09:00",
       *     "to": "17:00"
       *   }
       * ]
       */
      friday?: components["schemas"]["TimeRange"][];
      /**
       * @example [
       *   {
       *     "from": "10:00",
       *     "to": "17:00"
       *   }
       * ]
       */
      saturday?: components["schemas"]["TimeRange"][];
      /**
       * @example [
       *   {
       *     "from": "11:00",
       *     "to": "12:00"
       *   }
       * ]
       */
      sunday?: components["schemas"]["TimeRange"][];
    } | null;
    /**
     * @description Lists the opening hours of this place or POI along with the popular or busy hours.
     *
     * A string is also provided that can be used for display.
     */
    Hours: {
      /**
       * @description The opening hours for a place.
       *
       * Opening hours are shown by day of the week. Each day can have
       * several pairs of from and to times. For example, if a coffee shop is
       * open from 9:00 until 12:00 and then again from 13:00 until 17:00, it
       * would contain two pairs of from/to times: 09:00 paired with 12:00
       * and 13:00 with 17:00. Opening hours are shown in 24-hour time in the
       * local timezone of the place or POI.
       *
       * @example {
       *   "monday": [
       *     {
       *       "from": "09:00",
       *       "to": "17:00"
       *     }
       *   ],
       *   "tuesday": [
       *     {
       *       "from": "09:00",
       *       "to": "17:00"
       *     }
       *   ],
       *   "wednesday": [
       *     {
       *       "from": "09:00",
       *       "to": "12:00"
       *     },
       *     {
       *       "from": "13:00",
       *       "to": "17:00"
       *     }
       *   ],
       *   "thursday": [
       *     {
       *       "from": "09:00",
       *       "to": "17:00"
       *     }
       *   ],
       *   "friday": [
       *     {
       *       "from": "09:00",
       *       "to": "17:30"
       *     }
       *   ],
       *   "saturday": [
       *     {
       *       "from": "10:00",
       *       "to": "17:00"
       *     }
       *   ],
       *   "sunday": [
       *     {
       *       "from": "11:00",
       *       "to": "12:00"
       *     }
       *   ]
       * }
       */
      opening?: components["schemas"]["HoursByDay"];
      /**
       * @description The popular or busy hours for a place.
       *
       * Popular hours are shown by day of the week. Each day can have
       * several pairs of from and to times. For example, if a coffee shop is
       * popular from 9:00 until 10:00 and then again from 14:00 until 15:00,
       * it would contain two pairs of from/to times: 09:00 paired with 10:00
       * and 14:00 with 15:00. Popular hours are shown in 24-hour time in the
       * local timezone of the place or POI.
       *
       * @example {
       *   "monday": [
       *     {
       *       "from": "10:00",
       *       "to": "12:00"
       *     },
       *     {
       *       "from": "14:00",
       *       "to": "15:00"
       *     }
       *   ],
       *   "tuesday": [
       *     {
       *       "from": "14:00",
       *       "to": "15:00"
       *     }
       *   ],
       *   "wednesday": [
       *     {
       *       "from": "10:00",
       *       "to": "12:00"
       *     },
       *     {
       *       "from": "14:00",
       *       "to": "15:00"
       *     }
       *   ],
       *   "thursday": [
       *     {
       *       "from": "14:00",
       *       "to": "15:00"
       *     }
       *   ],
       *   "friday": [
       *     {
       *       "from": "15:00",
       *       "to": "17:00"
       *     }
       *   ],
       *   "saturday": [
       *     {
       *       "from": "10:00",
       *       "to": "12:00"
       *     }
       *   ],
       *   "sunday": [
       *     {
       *       "from": "11:00",
       *       "to": "12:00"
       *     }
       *   ]
       * }
       */
      popular?: components["schemas"]["HoursByDay"];
      /**
       * @description The opening hours for this place, formatted for display.
       *
       * @example Mon-Thu 12:00 PM-11:00 PM; Fri-Sat 12:00 PM-11:30 PM; Sun 12:00 PM-10:30 PM
       */
      openingText?: string | null;
    };
    /** @description Rating information about the price and user rating of the place. */
    Rating: {
      /**
       * @description An indication of the overall price of a place based on user reviews.
       *
       * @example cheap
       * @enum {string|null}
       */
      price?: ("cheap" | "moderate" | "expensive" | "veryExpensive") | null;
      /**
       * Format: float
       * @description A rating for the place based on user-reviews from 0 to 5, where 5 is the best rating.
       *
       * @example 4.5
       */
      user?: number | null;
    };
    /** @description The address of a place, or point of interest (POI). */
    Address: {
      /**
       * @description The street address for a place, for example the street name and number.
       *
       * @example 380 New York St
       */
      streetAddress?: string | null;
      /**
       * @description Additional address information, including suite or apartment numbers.
       *
       * @example Unit 32
       */
      extended?: string | null;
      /**
       * @description The city, town, or equivalent.
       * @example Redlands
       */
      locality?: string | null;
      /**
       * @description As defined by Nielsen, signifies a region where the population can receive similar TV and radio offerings (US only).
       *
       * @example Los Angeles
       */
      designatedMarketArea?: string | null;
      /**
       * @description The state, province, territory or equivalent.
       *
       * @example CA
       */
      region?: string | null;
      /**
       * @description Postal code or equivalent (zip code in the US).
       *
       * Format will be localized based on country.
       *
       * @example 92373
       */
      postcode?: string | null;
      /** @description Post-office box. */
      poBox?: string | null;
      /**
       * @description Two letter ISO country code
       * @example US
       */
      country?: string | null;
      /**
       * @description Additional sub-division.
       *
       * Usually, but not always, a country sub-division (e.g., Scotland).
       *
       * @example Scotland
       */
      adminRegion?: string | null;
      /**
       * @description Town/place employed in postal addressing.
       *
       * @example Edinburgh
       */
      postTown?: string | null;
      /**
       * @description The neighborhoods of the place.
       *
       * @example [
       *   "Downtown"
       * ]
       */
      neighborhood?: string[];
      /**
       * @description The census block Id of the place (US only).
       *
       * @example 60710081003002
       */
      censusBlockId?: string | null;
    };
    /** @description The social media details for a place. */
    SocialMedia: {
      /**
       * @description The facebook Id of the place.
       * @example 211211155280
       */
      facebookId?: string | null;
      /**
       * @description The twitter handle of the place.
       * @example esri
       */
      twitter?: string | null;
      /** @description The instagram ID of the place. */
      instagram?: string | null;
    };
    /** @description The contact information for a place. */
    ContactInfo: {
      /**
       * @description The telephone number of the place.
       * @example (909) 793-2853
       */
      telephone?: string | null;
      /**
       * Format: url
       * @description The website address of the place.
       * @example https://www.esri.com/en-us/home
       */
      website?: string | null;
      /**
       * @description Fax number.
       * @example 0800 169 2008
       */
      fax?: string | null;
      /**
       * @description Email address.
       * @example support@esri.com
       */
      email?: string | null;
    };
    /** @description Information about a chain that a place belongs to. */
    ChainInfo: {
      /**
       * @description The name of the chain.
       *
       * @example Starbucks
       */
      name?: string | null;
    };
    /** @description Provides links for accessing more results for the current request. */
    Links: {
      /**
       * Format: url
       * @description The base url for making a query to fetch more results.
       *
       * Combine this with the `previous` or `next` parameters to make a full
       * request url.
       *
       * @example https://places-api.arcgis.com/
       */
      base?: string;
      /**
       * @description A url fragment that can be appended to the `base` property to make a request url to fetch the previous page of results.
       *
       * If this property is omitted there are no previous pages of results.
       * You must also supply authentication details, such as a `token`, to
       * make a previous request.
       *
       * @example /arcgis/rest/services/places-service/v1/places/near-point?x=-117.194769&y=34.057289&radius=50.0&offset=0&pageSize=10
       */
      previous?: string;
      /**
       * @description A url fragment that can be appended to the `base` property to make a request url to fetch the next page of results.
       *
       * If this property is omitted there are no more pages of results. You
       * must also supply authentication details, such as a `token`, to make
       * a next request.
       *
       * @example /arcgis/rest/services/places-service/v1/places/near-point?x=-117.194769&y=34.057289&radius=50.0&offset=20&pageSize=10
       */
      next?: string;
    };
    Error: {
      /** @description Error information */
      error: {
        /**
         * @description A code identifying the type of error.
         *
         * This can be an HTTP status code, `498` (invalid or expired
         * token), or `499` (missing token).
         *
         * @example 400
         * @enum {integer}
         */
        code: 400 | 401 | 403 | 404 | 498 | 499 | 500;
        /**
         * @description A message describing the error.
         * @example Parameter invalid.
         */
        message: string;
        /** @description List of details about the error. */
        details?: string[];
        /**
         * Format: url
         * @description A link to general information about the service, such as the owning system and token service URL.
         *
         * This property is only
         * present for errors relating to tokens.
         *
         * @example https://places-api.arcgis.com/arcgis/rest/info
         */
        restInfoUrl?: string;
      };
    };
  };
  responses: {
    /** Authentication Error. The API key or token is missing, invalid or expired. */
    UnauthorizedErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** An error occurred on the server. */
    ServerErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** Invalid query parameters. */
    InvalidQueryErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** A resource with the supplied Id was not found. */
    IdNotFoundErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** The required parameter 'token' is valid but does not have permission to access the service. */
    PermissionMissingErrorResponse: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** A successful request to return details for a single category. */
    CategoryDetailsResponse: {
      content: {
        "application/json": components["schemas"]["CategoryDetails"];
      };
    };
    /** Details of categories that a `Place` can belong to. */
    CategoriesDetailsResponse: {
      content: {
        "application/json": {
          categories: components["schemas"]["CategoryDetails"][];
        };
      };
    };
    /** A successful response for a `places/near-point` request. */
    NearPointResponse: {
      content: {
        "application/json": {
          results: components["schemas"]["NearPointResult"][];
          maxResultsExceeded?: components["schemas"]["MaxResultsExceeded"];
          links?: components["schemas"]["Links"];
        };
      };
    };
    /** A successful response for a `places/within-extent` request. */
    WithinExtentResponse: {
      content: {
        "application/json": {
          results: components["schemas"]["WithinExtentResult"][];
          maxResultsExceeded?: components["schemas"]["MaxResultsExceeded"];
          links?: components["schemas"]["Links"];
        };
      };
    };
    /** A successful response for a `places/{placeId}` request. */
    PlaceDetailsResponse: {
      content: {
        "application/json": {
          placeDetails: components["schemas"]["PlaceDetails"];
        };
      };
    };
  };
  parameters: {
    /**
     * @description The radius in meters to search for places - measured from the supplied `x` and `y` coordinate.
     *
     * A radius of 100 meters will result in a circular search area that is 200
     * meters in diameter. If omitted, the default search radius will be 1,000
     * meters.
     */
    RadiusParam: components["schemas"]["SearchDistance"];
    /**
     * @description The minimum x coordinate, or longitude, of the search extent.
     *
     * This is the furthest _west_ that will be searched.
     */
    XMinParam: components["schemas"]["XCoord"];
    /**
     * @description The minimum y coordinate, or latitude, of the search extent.
     *
     * This is the furthest _south_ that will be searched.
     */
    YMinParam: components["schemas"]["YCoord"];
    /**
     * @description The maximum x coordinate, or longitude, of the search extent.
     *
     * This is the furthest _east_ that will be searched.
     */
    XMaxParam: components["schemas"]["XCoord"];
    /**
     * @description The maximum y coordinate, or latitude, of the search extent.
     *
     * This is the furthest _north_ that will be searched.
     */
    YMaxParam: components["schemas"]["YCoord"];
    /**
     * @description Filters places to those that match the category Ids.
     *
     * Places will be returned if they match _any_ of the category Ids. If this
     * property is not set, places will be returned regardless of their
     * category.
     *
     * You can obtain information on category Ids from the
     * `places/categories` endpoint. For example, to filter for places
     * where the category is "Bicycle Store", include the categoryId
     * `17117` in this property.
     */
    CategoryIdsParam: components["schemas"]["CategoryId"][];
    /** @description Free search text for places against names, categories etc. */
    SearchTextParam: string;
    /**
     * @description The number of places that should be sent in the response for a single request.
     *
     * You can set this to any value up to `20` when you need to control the
     * size of responses that your app downloads.
     *
     * If the query results in more than this page size, then the response object
     * will contain a `next` url fragment. This fragment can be used to form a
     * request url to fetch the next page of results.
     *
     * The maximum number of places that can be returned in total is `200`. If
     * a request reaches this limit without returning all of the available
     * places, the response will contain the property
     * `"maxResultsExceeded":true` in addition to place results.
     */
    PageSizeParam: number;
    /**
     * @description Request results starting from the given offset.
     *
     * This parameter works with the `pageSize` parameter to fetch results from
     * subsequent pages. For example, with a page size of 2, setting the
     * `offset` to `2` would return the 3rd and 4th results.
     *
     * Regardless of paging, the maximum number of places that can be returned
     * by a single query is `200`. When a query results in more than `200`
     * places, the response will contain the property
     * `"maxResultsExceeded":true` in addition to place results.
     */
    OffsetParam: number;
    /**
     * @description The requested response format - either `json` or `pjson` (pretty json).
     *
     * @example pjson
     */
    FormatParam: "json" | "pjson";
    /** @description The ID of the category that you want to fetch details for. */
    CategoryIdParam: components["schemas"]["CategoryId"];
    /**
     * @description A text filter that will be used for searching categories.
     *
     * The text must be at least three characters and will be applied as a
     * partial match. For example, using the filter "off" would return
     * categories using the word "Office" as well as those using the word
     * "Coffee".
     */
    CategoriesFilterParam: string;
    /**
     * @description The array of fields that define the attributes to return for a place.
     *
     * Use this parameter to define the attributes you would like returned,
     * for example `["name", "address:streetAddress"]`. However, you can also
     * set this value to `["all"]` to return all of the attributes available
     * for a place.
     *
     * The `placeId` attribute is always returned in addition to the other
     * attributes you requested. If a valid attribute value is not available,
     * `null`, or an empty collection, is returned and you are not charged for it. To see the fields and
     * pricing groups they belong to, go to the table above.
     */
    RequestedFieldsParam: (
      | "all"
      | "address"
      | "address:adminRegion"
      | "address:censusBlockId"
      | "address:country"
      | "address:designatedMarketArea"
      | "address:extended"
      | "address:locality"
      | "address:neighborhood"
      | "address:poBox"
      | "address:postcode"
      | "address:postTown"
      | "address:region"
      | "address:streetAddress"
      | "categories"
      | "contactInfo"
      | "contactInfo:email"
      | "contactInfo:fax"
      | "contactInfo:telephone"
      | "contactInfo:website"
      | "chains"
      | "description"
      | "hours"
      | "hours:opening"
      | "hours:openingText"
      | "hours:popular"
      | "name"
      | "rating"
      | "rating:price"
      | "rating:user"
      | "socialMedia"
      | "socialMedia:facebookId"
      | "socialMedia:instagram"
      | "socialMedia:twitter"
    )[];
  };
}

export interface operations {
  /**
   * A category describes a type of place, such as "movie theater" or "zoo".
   * The places service has over 1,000 categories (or types) of place. The
   * categories fall into ten general groups: Arts and Entertainment, Business
   * and Professional Services, Community and Government, Dining and Drinking,
   * Events, Health and Medicine, Landmarks and Outdoors, Retail, Sports and
   * Recreation, and Travel and Transportation.
   *
   * There are up to four levels of categories. For example: "Travel and
   * Transportation" (Level 1), "Transport Hub" (Level 2), "Airport"
   * (Level  3) and "Airport Terminal" (Level 4).
   *
   * The table below shows the top-level of categories, along with a
   * selection of level two categories.
   *
   * The `/categories` endpoint fetches the latest set of place categories.
   * The request returns all categories including their label and
   * `categoryId`. You should use this endpoint to fetch the latest set of
   * categories when your app starts up. Each category contains an unique ID
   * that you can use to perform a `near-point` or `within-extent` search.
   *
   * You can also reduce the list to a subset of categories using the
   * `filter` parameter. For example, searching for "coffee" would return
   * categories including:
   *
   * - "Coffee Shop"
   *
   * - "Coffee Roaster"
   *
   * - "Turkish Coffeehouse"
   *
   * |Category Label | Category ID | Level 2|
   * |--- | --- | ---|
   * |Arts and Entertainment | 10000 | Amusement Park (10001), Art Gallery (10004), Casino (10008), Exhibit (10016), Movie Theater (10024), Museum (10027), Stadium (10051), Water Park (10055), Zoo (10056), ...|
   * |Business and Professional Services | 11000 | Construction (11028), Convention Center (11029), Food and Beverage Service (11056), Health and Beauty Service (11061), Industrial Estate (11106), Office (11124), ...|
   * |Community and Government | 12000 | Education (12009), Organization (12082), Government Building (12064), Community Center (12004), Library (12080), Utility Company (12115), ...|
   * |Dining and Drinking | 13000 | Bakery (13002), Bar (13003), Cafes, Coffee, and Tea House (13032), Restaurant (13065, ...|
   * |Event | 14000 |  Conference (14001), Convention (14002), Entertainment Event (14003), Marketplace (14009), ...|
   * |Health and Medicine | 15000 | Dentist (15007), Emergency Service (15008), Hospital (15014), Medical Center (15016), Optometrist (15024), Physician (15027), Veterinarian (15054), ...|
   * |Landmarks and Outdoors | 16000 | Beach (16003), Building / Structure (16007), Campground (16008), Harbor / Marina (16018), Historic and Protected Site (16020), Monument (16026), Nature Preserve (16028), Park (16032), ...|
   * |Retail | 17000 | Arts and Crafts Store (17003), Bookstore (17018), Convenience Store (17029), Department Store (17033)|
   * |Sports and Recreation | 18000 | Athletic Field (18001), Baseball (18002), Basketball (18006), Football (18013), Golf (18016), Gym and Studio (18021), ...|
   * |Travel and Transportation | 19000 | Bike Rental (19002), Cruise (19005), Electric Vehicle Charging Station (19006), Fuel Station (19007), Lodging (19009), Transport Hub (19030), ...|
   *
   * **Note**: Category details are subject to change as new types of places
   * are introduced.
   */
  categoriesGet: {
    parameters: {
      query: {
        /**
         * A text filter that will be used for searching categories.
         *
         * The text must be at least three characters and will be applied as a
         * partial match. For example, using the filter "off" would return
         * categories using the word "Office" as well as those using the word
         * "Coffee".
         */
        filter?: components["parameters"]["CategoriesFilterParam"];
        /** The requested response format - either `json` or `pjson` (pretty json). */
        f?: components["parameters"]["FormatParam"];
      };
    };
    responses: {
      200: components["responses"]["CategoriesDetailsResponse"];
      400: components["responses"]["InvalidQueryErrorResponse"];
      401: components["responses"]["UnauthorizedErrorResponse"];
      403: components["responses"]["PermissionMissingErrorResponse"];
      "5XX": components["responses"]["ServerErrorResponse"];
    };
  };
  /** The `/categories/{categoryId}` operation returns all the groups to which the category belongs. You must supply a `category ID` to use this operation. */
  categoriesCategoryIdGet: {
    parameters: {
      path: {
        /** The ID of the category that you want to fetch details for. */
        categoryId: components["parameters"]["CategoryIdParam"];
      };
      query: {
        /** The requested response format - either `json` or `pjson` (pretty json). */
        f?: components["parameters"]["FormatParam"];
      };
    };
    responses: {
      200: components["responses"]["CategoryDetailsResponse"];
      400: components["responses"]["InvalidQueryErrorResponse"];
      401: components["responses"]["UnauthorizedErrorResponse"];
      403: components["responses"]["PermissionMissingErrorResponse"];
      404: components["responses"]["IdNotFoundErrorResponse"];
      "5XX": components["responses"]["ServerErrorResponse"];
    };
  };
  /**
   * The `/places/near-point` operation finds places that are within a given
   * radius of a specified location. The returned places contain basic data
   * such as name, category and location.
   *
   * To perform the request, you must supply the `x` and `y` coordinates of
   * the point from which to search. Optionally, you can also specify the:
   *
   * - Search radius (up to 10,000 meters)
   * - Category IDs
   * - Search text
   *
   * If the `maxResultsExceeded` property in the response is `true`, then you
   * can page through the results to return more places. The maximum number
   * of places that cane be paged to is 200.
   *
   * **Note**: You cannot permanently store places. Please see the [Terms of
   * use](https://developers.arcgis.com/documentation/mapping-apis-and-services/deployment/terms-of-use/).
   */
  nearPointGet: {
    parameters: {
      query: {
        /** The x coordinate, or longitude, to search from, in WGS84 decimal degrees. */
        x: components["schemas"]["XCoord"];
        /** The y coordinate, or latitude, to search from, in WGS84 decimal degrees. */
        y: components["schemas"]["YCoord"];
        /**
         * The radius in meters to search for places - measured from the supplied `x` and `y` coordinate.
         *
         * A radius of 100 meters will result in a circular search area that is 200
         * meters in diameter. If omitted, the default search radius will be 1,000
         * meters.
         */
        radius?: components["parameters"]["RadiusParam"];
        /**
         * Filters places to those that match the category Ids.
         *
         * Places will be returned if they match _any_ of the category Ids. If this
         * property is not set, places will be returned regardless of their
         * category.
         *
         * You can obtain information on category Ids from the
         * `places/categories` endpoint. For example, to filter for places
         * where the category is "Bicycle Store", include the categoryId
         * `17117` in this property.
         */
        categoryIds?: components["parameters"]["CategoryIdsParam"];
        /** Free search text for places against names, categories etc. */
        searchText?: components["parameters"]["SearchTextParam"];
        /**
         * The number of places that should be sent in the response for a single request.
         *
         * You can set this to any value up to `20` when you need to control the
         * size of responses that your app downloads.
         *
         * If the query results in more than this page size, then the response object
         * will contain a `next` url fragment. This fragment can be used to form a
         * request url to fetch the next page of results.
         *
         * The maximum number of places that can be returned in total is `200`. If
         * a request reaches this limit without returning all of the available
         * places, the response will contain the property
         * `"maxResultsExceeded":true` in addition to place results.
         */
        pageSize?: components["parameters"]["PageSizeParam"];
        /**
         * Request results starting from the given offset.
         *
         * This parameter works with the `pageSize` parameter to fetch results from
         * subsequent pages. For example, with a page size of 2, setting the
         * `offset` to `2` would return the 3rd and 4th results.
         *
         * Regardless of paging, the maximum number of places that can be returned
         * by a single query is `200`. When a query results in more than `200`
         * places, the response will contain the property
         * `"maxResultsExceeded":true` in addition to place results.
         */
        offset?: components["parameters"]["OffsetParam"];
        /** The requested response format - either `json` or `pjson` (pretty json). */
        f?: components["parameters"]["FormatParam"];
      };
    };
    responses: {
      200: components["responses"]["NearPointResponse"];
      400: components["responses"]["InvalidQueryErrorResponse"];
      401: components["responses"]["UnauthorizedErrorResponse"];
      403: components["responses"]["PermissionMissingErrorResponse"];
      "5XX": components["responses"]["ServerErrorResponse"];
    };
  };
  /**
   * The `/places/within-extent` operation searches for places within an extent (bounding box).
   *
   * You must supply the `xmin`,
   * `ymin`, `xmax` and `ymax` coordinates to define the extent. The maximum width
   * and height of an extent that can be used in a search is 20,000 meters.
   *
   * You can also provide multiple categories or search text to find specific types of places within the extent.
   *
   * The default number of places returned (`pageSize`) is 10. The maximum `pageSize` value is 20.
   *
   * If the `maxResultsExceeded` property in the response is `true`, then you
   * can page through the results to return more places. The maximum number
   * of places that cane be paged to is 200.
   *
   * **Note**: You cannot permanently store places. Please see the [Terms of
   * use](https://developers.arcgis.com/documentation/mapping-apis-and-services/deployment/terms-of-use/).
   */
  withinExtentGet: {
    parameters: {
      query: {
        /**
         * The minimum x coordinate, or longitude, of the search extent.
         *
         * This is the furthest _west_ that will be searched.
         */
        xmin: components["parameters"]["XMinParam"];
        /**
         * The minimum y coordinate, or latitude, of the search extent.
         *
         * This is the furthest _south_ that will be searched.
         */
        ymin: components["parameters"]["YMinParam"];
        /**
         * The maximum x coordinate, or longitude, of the search extent.
         *
         * This is the furthest _east_ that will be searched.
         */
        xmax: components["parameters"]["XMaxParam"];
        /**
         * The maximum y coordinate, or latitude, of the search extent.
         *
         * This is the furthest _north_ that will be searched.
         */
        ymax: components["parameters"]["YMaxParam"];
        /**
         * Filters places to those that match the category Ids.
         *
         * Places will be returned if they match _any_ of the category Ids. If this
         * property is not set, places will be returned regardless of their
         * category.
         *
         * You can obtain information on category Ids from the
         * `places/categories` endpoint. For example, to filter for places
         * where the category is "Bicycle Store", include the categoryId
         * `17117` in this property.
         */
        categoryIds?: components["parameters"]["CategoryIdsParam"];
        /** Free search text for places against names, categories etc. */
        searchText?: components["parameters"]["SearchTextParam"];
        /**
         * The number of places that should be sent in the response for a single request.
         *
         * You can set this to any value up to `20` when you need to control the
         * size of responses that your app downloads.
         *
         * If the query results in more than this page size, then the response object
         * will contain a `next` url fragment. This fragment can be used to form a
         * request url to fetch the next page of results.
         *
         * The maximum number of places that can be returned in total is `200`. If
         * a request reaches this limit without returning all of the available
         * places, the response will contain the property
         * `"maxResultsExceeded":true` in addition to place results.
         */
        pageSize?: components["parameters"]["PageSizeParam"];
        /**
         * Request results starting from the given offset.
         *
         * This parameter works with the `pageSize` parameter to fetch results from
         * subsequent pages. For example, with a page size of 2, setting the
         * `offset` to `2` would return the 3rd and 4th results.
         *
         * Regardless of paging, the maximum number of places that can be returned
         * by a single query is `200`. When a query results in more than `200`
         * places, the response will contain the property
         * `"maxResultsExceeded":true` in addition to place results.
         */
        offset?: components["parameters"]["OffsetParam"];
        /** The requested response format - either `json` or `pjson` (pretty json). */
        f?: components["parameters"]["FormatParam"];
      };
    };
    responses: {
      200: components["responses"]["WithinExtentResponse"];
      400: components["responses"]["InvalidQueryErrorResponse"];
      401: components["responses"]["UnauthorizedErrorResponse"];
      403: components["responses"]["PermissionMissingErrorResponse"];
      "5XX": components["responses"]["ServerErrorResponse"];
    };
  };
  /**
   * The `/places/{placeId}` operation returns details for a place.
   *
   * To request details, you use the `requestedFields` parameter to specify
   * the fields and the attributes you want from the **Place**,
   * **Address**, and/or **Details** price groups.
   *
   * It is always recommended to specify the fields you want, however, you
   * can also use `requestedFields=all` to return all of the attributes
   * available. By default, The `placeId` attribute is always returned in addition
   * to the other attributes you requested.
   *
   * The attributes available for places may vary. For example, opening hours
   * may not be available (or applicable) for geographic places or landmarks.
   *
   * You will only be charged for attributes that contain valid values for
   * the requested fields. If no data is available for the requested field,
   * `null` or an empty collection  is returned and you are not charged. You are only charged once if
   * one or more attributes with valid values are returned from a price
   * group. To learn more, go to
   * [Pricing](https://places-service-preview.sites.afd.arcgis.com/rest/places/#pricing).
   *
   * Field | Price group
   * --- | ---
   * name | Place
   * categoryId | Place
   * address:country | Address
   * address:adminRegion | Address
   * address:region | Address
   * address:streetAddress | Address
   * address:extended | Address
   * address:poBox | Address
   * address:postcode | Address
   * address:postTown | Address
   * address:locality | Address
   * address:neighborhood | Address
   * address:censusBlockId | Address
   * address:designatedMarketArea | Address
   * contactInfo:telephone | Details
   * contactInfo:website | Details
   * contactInfo:fax | Details
   * contactInfo:email | Details
   * socialMedia:facebookId | Details
   * socialMedia:instagram | Details
   * socialMedia:twitter | Details
   * chains | Details
   * description | Details
   * rating:user | Details
   * rating:price | Details
   * hours:opening | Details
   * hours:popular | Details
   * hours:openingText | Details
   *
   * **Note**: You cannot permanently store places. Please see the [Terms of
   * use](https://developers.arcgis.com/documentation/mapping-apis-and-services/deployment/terms-of-use/).
   */
  placeIdGet: {
    parameters: {
      path: {
        /** The Id of the place for which you want to fetch additional details. */
        placeId: components["schemas"]["PlaceId"];
      };
      query: {
        /**
         * The array of fields that define the attributes to return for a place.
         *
         * Use this parameter to define the attributes you would like returned,
         * for example `["name", "address:streetAddress"]`. However, you can also
         * set this value to `["all"]` to return all of the attributes available
         * for a place.
         *
         * The `placeId` attribute is always returned in addition to the other
         * attributes you requested. If a valid attribute value is not available,
         * `null`, or an empty collection, is returned and you are not charged for it. To see the fields and
         * pricing groups they belong to, go to the table above.
         */
        requestedFields: components["parameters"]["RequestedFieldsParam"];
        /** The requested response format - either `json` or `pjson` (pretty json). */
        f?: components["parameters"]["FormatParam"];
      };
    };
    responses: {
      200: components["responses"]["PlaceDetailsResponse"];
      400: components["responses"]["InvalidQueryErrorResponse"];
      401: components["responses"]["UnauthorizedErrorResponse"];
      403: components["responses"]["PermissionMissingErrorResponse"];
      404: components["responses"]["IdNotFoundErrorResponse"];
      "5XX": components["responses"]["ServerErrorResponse"];
    };
  };
}

export interface external {}
